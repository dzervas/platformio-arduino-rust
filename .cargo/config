[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# uncomment ONE of these three option to make `cargo run` start a GDB session
# which option to pick depends on your system
# runner = "arm-none-eabi-gdb -q -x openocd.gdb"
# runner = "gdb-multiarch -q -x openocd.gdb"
# runner = "gdb -q -x openocd.gdb"

rustflags = [
  "-C", "linker-flavor=gcc",
  "-C", "linker=arm-none-eabi-g++",

  # "-C", "link-arg=-Wl,--no-as-needed",

  "-C", "link-arg=-Wl,-Tnrf52832_s132_v6.ld",
  "-C", "link-arg=-nostartfiles",

  "-C", "soft-float=no",
  "-C", "link-dead-code=yes",
  "--emit", "obj",
  "-C", "extra-filename=-platformio",
  "-C", "default-linker-libraries=no",
  "-C", "link-arg=-Wl,--gc-sections,--relax",
  "-C", "link-arg=-mcpu=cortex-m4",
  "-C", "link-arg=-mfloat-abi=hard",
  "-C", "link-arg=-mfpu=fpv4-sp-d16",
  # "-C", "target-feature=-crt-static",
]

[build]
# Pick ONE of these compilation targets
# target = "thumbv6m-none-eabi"    # Cortex-M0 and Cortex-M0+
# target = "thumbv7m-none-eabi"    # Cortex-M3
# target = "thumbv7em-none-eabi"   # Cortex-M4 and Cortex-M7 (no FPU)
target = "thumbv7em-none-eabihf" # Cortex-M4F and Cortex-M7F (with FPU)
