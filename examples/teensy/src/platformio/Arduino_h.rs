/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const __NEWLIB_H__: u32 = 1;
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &'static [u8; 6usize] = b"2.4.0\0";
pub const __NEWLIB__: u32 = 2;
pub const __NEWLIB_MINOR__: u32 = 4;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _WANT_IO_LONG_LONG: u32 = 1;
pub const _WANT_REGISTER_FINI: u32 = 1;
pub const _MB_LEN_MAX: u32 = 1;
pub const HAVE_INITFINI_ARRAY: u32 = 1;
pub const _ATEXIT_DYNAMIC_ALLOC: u32 = 1;
pub const _HAVE_LONG_DOUBLE: u32 = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: u32 = 1;
pub const _LDBL_EQ_DBL: u32 = 1;
pub const _FVWRITE_IN_STREAMIO: u32 = 1;
pub const _FSEEK_OPTIMIZATION: u32 = 1;
pub const _WIDE_ORIENT: u32 = 1;
pub const _UNBUF_STREAM_OPT: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __RAND_MAX: u32 = 2147483647;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const _NULL: u32 = 0;
pub const _ATEXIT_SIZE: u32 = 32;
pub const _RAND48_SEED_0: u32 = 13070;
pub const _RAND48_SEED_1: u32 = 43981;
pub const _RAND48_SEED_2: u32 = 4660;
pub const _RAND48_MULT_0: u32 = 58989;
pub const _RAND48_MULT_1: u32 = 57068;
pub const _RAND48_MULT_2: u32 = 5;
pub const _RAND48_ADD: u32 = 11;
pub const _REENT_EMERGENCY_SIZE: u32 = 25;
pub const _REENT_ASCTIME_SIZE: u32 = 26;
pub const _REENT_SIGNAL_SIZE: u32 = 24;
pub const _N_LISTS: u32 = 30;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___OFFSETOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const _M_LN2: f64 = 0.6931471805599453;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_TWOPI: f64 = 6.283185307179586;
pub const M_SQRTPI: f64 = 1.772453850905516;
pub const M_SQRT3: f64 = 1.7320508075688772;
pub const M_IVLN10: f64 = 0.4342944819032518;
pub const M_LOG2_E: f64 = 0.6931471805599453;
pub const __PGMSPACE_H_: u32 = 1;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const __int20: u32 = 2;
pub const __INT8: &'static [u8; 3usize] = b"hh\0";
pub const __INT16: &'static [u8; 2usize] = b"h\0";
pub const __INT64: &'static [u8; 3usize] = b"ll\0";
pub const __FAST8: &'static [u8; 3usize] = b"hh\0";
pub const __FAST16: &'static [u8; 2usize] = b"h\0";
pub const __FAST64: &'static [u8; 3usize] = b"ll\0";
pub const __LEAST8: &'static [u8; 3usize] = b"hh\0";
pub const __LEAST16: &'static [u8; 2usize] = b"h\0";
pub const __LEAST64: &'static [u8; 3usize] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const B0: u32 = 0;
pub const B00: u32 = 0;
pub const B000: u32 = 0;
pub const B0000: u32 = 0;
pub const B00000: u32 = 0;
pub const B000000: u32 = 0;
pub const B0000000: u32 = 0;
pub const B00000000: u32 = 0;
pub const B1: u32 = 1;
pub const B01: u32 = 1;
pub const B001: u32 = 1;
pub const B0001: u32 = 1;
pub const B00001: u32 = 1;
pub const B000001: u32 = 1;
pub const B0000001: u32 = 1;
pub const B00000001: u32 = 1;
pub const B10: u32 = 2;
pub const B010: u32 = 2;
pub const B0010: u32 = 2;
pub const B00010: u32 = 2;
pub const B000010: u32 = 2;
pub const B0000010: u32 = 2;
pub const B00000010: u32 = 2;
pub const B11: u32 = 3;
pub const B011: u32 = 3;
pub const B0011: u32 = 3;
pub const B00011: u32 = 3;
pub const B000011: u32 = 3;
pub const B0000011: u32 = 3;
pub const B00000011: u32 = 3;
pub const B100: u32 = 4;
pub const B0100: u32 = 4;
pub const B00100: u32 = 4;
pub const B000100: u32 = 4;
pub const B0000100: u32 = 4;
pub const B00000100: u32 = 4;
pub const B101: u32 = 5;
pub const B0101: u32 = 5;
pub const B00101: u32 = 5;
pub const B000101: u32 = 5;
pub const B0000101: u32 = 5;
pub const B00000101: u32 = 5;
pub const B110: u32 = 6;
pub const B0110: u32 = 6;
pub const B00110: u32 = 6;
pub const B000110: u32 = 6;
pub const B0000110: u32 = 6;
pub const B00000110: u32 = 6;
pub const B111: u32 = 7;
pub const B0111: u32 = 7;
pub const B00111: u32 = 7;
pub const B000111: u32 = 7;
pub const B0000111: u32 = 7;
pub const B00000111: u32 = 7;
pub const B1000: u32 = 8;
pub const B01000: u32 = 8;
pub const B001000: u32 = 8;
pub const B0001000: u32 = 8;
pub const B00001000: u32 = 8;
pub const B1001: u32 = 9;
pub const B01001: u32 = 9;
pub const B001001: u32 = 9;
pub const B0001001: u32 = 9;
pub const B00001001: u32 = 9;
pub const B1010: u32 = 10;
pub const B01010: u32 = 10;
pub const B001010: u32 = 10;
pub const B0001010: u32 = 10;
pub const B00001010: u32 = 10;
pub const B1011: u32 = 11;
pub const B01011: u32 = 11;
pub const B001011: u32 = 11;
pub const B0001011: u32 = 11;
pub const B00001011: u32 = 11;
pub const B1100: u32 = 12;
pub const B01100: u32 = 12;
pub const B001100: u32 = 12;
pub const B0001100: u32 = 12;
pub const B00001100: u32 = 12;
pub const B1101: u32 = 13;
pub const B01101: u32 = 13;
pub const B001101: u32 = 13;
pub const B0001101: u32 = 13;
pub const B00001101: u32 = 13;
pub const B1110: u32 = 14;
pub const B01110: u32 = 14;
pub const B001110: u32 = 14;
pub const B0001110: u32 = 14;
pub const B00001110: u32 = 14;
pub const B1111: u32 = 15;
pub const B01111: u32 = 15;
pub const B001111: u32 = 15;
pub const B0001111: u32 = 15;
pub const B00001111: u32 = 15;
pub const B10000: u32 = 16;
pub const B010000: u32 = 16;
pub const B0010000: u32 = 16;
pub const B00010000: u32 = 16;
pub const B10001: u32 = 17;
pub const B010001: u32 = 17;
pub const B0010001: u32 = 17;
pub const B00010001: u32 = 17;
pub const B10010: u32 = 18;
pub const B010010: u32 = 18;
pub const B0010010: u32 = 18;
pub const B00010010: u32 = 18;
pub const B10011: u32 = 19;
pub const B010011: u32 = 19;
pub const B0010011: u32 = 19;
pub const B00010011: u32 = 19;
pub const B10100: u32 = 20;
pub const B010100: u32 = 20;
pub const B0010100: u32 = 20;
pub const B00010100: u32 = 20;
pub const B10101: u32 = 21;
pub const B010101: u32 = 21;
pub const B0010101: u32 = 21;
pub const B00010101: u32 = 21;
pub const B10110: u32 = 22;
pub const B010110: u32 = 22;
pub const B0010110: u32 = 22;
pub const B00010110: u32 = 22;
pub const B10111: u32 = 23;
pub const B010111: u32 = 23;
pub const B0010111: u32 = 23;
pub const B00010111: u32 = 23;
pub const B11000: u32 = 24;
pub const B011000: u32 = 24;
pub const B0011000: u32 = 24;
pub const B00011000: u32 = 24;
pub const B11001: u32 = 25;
pub const B011001: u32 = 25;
pub const B0011001: u32 = 25;
pub const B00011001: u32 = 25;
pub const B11010: u32 = 26;
pub const B011010: u32 = 26;
pub const B0011010: u32 = 26;
pub const B00011010: u32 = 26;
pub const B11011: u32 = 27;
pub const B011011: u32 = 27;
pub const B0011011: u32 = 27;
pub const B00011011: u32 = 27;
pub const B11100: u32 = 28;
pub const B011100: u32 = 28;
pub const B0011100: u32 = 28;
pub const B00011100: u32 = 28;
pub const B11101: u32 = 29;
pub const B011101: u32 = 29;
pub const B0011101: u32 = 29;
pub const B00011101: u32 = 29;
pub const B11110: u32 = 30;
pub const B011110: u32 = 30;
pub const B0011110: u32 = 30;
pub const B00011110: u32 = 30;
pub const B11111: u32 = 31;
pub const B011111: u32 = 31;
pub const B0011111: u32 = 31;
pub const B00011111: u32 = 31;
pub const B100000: u32 = 32;
pub const B0100000: u32 = 32;
pub const B00100000: u32 = 32;
pub const B100001: u32 = 33;
pub const B0100001: u32 = 33;
pub const B00100001: u32 = 33;
pub const B100010: u32 = 34;
pub const B0100010: u32 = 34;
pub const B00100010: u32 = 34;
pub const B100011: u32 = 35;
pub const B0100011: u32 = 35;
pub const B00100011: u32 = 35;
pub const B100100: u32 = 36;
pub const B0100100: u32 = 36;
pub const B00100100: u32 = 36;
pub const B100101: u32 = 37;
pub const B0100101: u32 = 37;
pub const B00100101: u32 = 37;
pub const B100110: u32 = 38;
pub const B0100110: u32 = 38;
pub const B00100110: u32 = 38;
pub const B100111: u32 = 39;
pub const B0100111: u32 = 39;
pub const B00100111: u32 = 39;
pub const B101000: u32 = 40;
pub const B0101000: u32 = 40;
pub const B00101000: u32 = 40;
pub const B101001: u32 = 41;
pub const B0101001: u32 = 41;
pub const B00101001: u32 = 41;
pub const B101010: u32 = 42;
pub const B0101010: u32 = 42;
pub const B00101010: u32 = 42;
pub const B101011: u32 = 43;
pub const B0101011: u32 = 43;
pub const B00101011: u32 = 43;
pub const B101100: u32 = 44;
pub const B0101100: u32 = 44;
pub const B00101100: u32 = 44;
pub const B101101: u32 = 45;
pub const B0101101: u32 = 45;
pub const B00101101: u32 = 45;
pub const B101110: u32 = 46;
pub const B0101110: u32 = 46;
pub const B00101110: u32 = 46;
pub const B101111: u32 = 47;
pub const B0101111: u32 = 47;
pub const B00101111: u32 = 47;
pub const B110000: u32 = 48;
pub const B0110000: u32 = 48;
pub const B00110000: u32 = 48;
pub const B110001: u32 = 49;
pub const B0110001: u32 = 49;
pub const B00110001: u32 = 49;
pub const B110010: u32 = 50;
pub const B0110010: u32 = 50;
pub const B00110010: u32 = 50;
pub const B110011: u32 = 51;
pub const B0110011: u32 = 51;
pub const B00110011: u32 = 51;
pub const B110100: u32 = 52;
pub const B0110100: u32 = 52;
pub const B00110100: u32 = 52;
pub const B110101: u32 = 53;
pub const B0110101: u32 = 53;
pub const B00110101: u32 = 53;
pub const B110110: u32 = 54;
pub const B0110110: u32 = 54;
pub const B00110110: u32 = 54;
pub const B110111: u32 = 55;
pub const B0110111: u32 = 55;
pub const B00110111: u32 = 55;
pub const B111000: u32 = 56;
pub const B0111000: u32 = 56;
pub const B00111000: u32 = 56;
pub const B111001: u32 = 57;
pub const B0111001: u32 = 57;
pub const B00111001: u32 = 57;
pub const B111010: u32 = 58;
pub const B0111010: u32 = 58;
pub const B00111010: u32 = 58;
pub const B111011: u32 = 59;
pub const B0111011: u32 = 59;
pub const B00111011: u32 = 59;
pub const B111100: u32 = 60;
pub const B0111100: u32 = 60;
pub const B00111100: u32 = 60;
pub const B111101: u32 = 61;
pub const B0111101: u32 = 61;
pub const B00111101: u32 = 61;
pub const B111110: u32 = 62;
pub const B0111110: u32 = 62;
pub const B00111110: u32 = 62;
pub const B111111: u32 = 63;
pub const B0111111: u32 = 63;
pub const B00111111: u32 = 63;
pub const B1000000: u32 = 64;
pub const B01000000: u32 = 64;
pub const B1000001: u32 = 65;
pub const B01000001: u32 = 65;
pub const B1000010: u32 = 66;
pub const B01000010: u32 = 66;
pub const B1000011: u32 = 67;
pub const B01000011: u32 = 67;
pub const B1000100: u32 = 68;
pub const B01000100: u32 = 68;
pub const B1000101: u32 = 69;
pub const B01000101: u32 = 69;
pub const B1000110: u32 = 70;
pub const B01000110: u32 = 70;
pub const B1000111: u32 = 71;
pub const B01000111: u32 = 71;
pub const B1001000: u32 = 72;
pub const B01001000: u32 = 72;
pub const B1001001: u32 = 73;
pub const B01001001: u32 = 73;
pub const B1001010: u32 = 74;
pub const B01001010: u32 = 74;
pub const B1001011: u32 = 75;
pub const B01001011: u32 = 75;
pub const B1001100: u32 = 76;
pub const B01001100: u32 = 76;
pub const B1001101: u32 = 77;
pub const B01001101: u32 = 77;
pub const B1001110: u32 = 78;
pub const B01001110: u32 = 78;
pub const B1001111: u32 = 79;
pub const B01001111: u32 = 79;
pub const B1010000: u32 = 80;
pub const B01010000: u32 = 80;
pub const B1010001: u32 = 81;
pub const B01010001: u32 = 81;
pub const B1010010: u32 = 82;
pub const B01010010: u32 = 82;
pub const B1010011: u32 = 83;
pub const B01010011: u32 = 83;
pub const B1010100: u32 = 84;
pub const B01010100: u32 = 84;
pub const B1010101: u32 = 85;
pub const B01010101: u32 = 85;
pub const B1010110: u32 = 86;
pub const B01010110: u32 = 86;
pub const B1010111: u32 = 87;
pub const B01010111: u32 = 87;
pub const B1011000: u32 = 88;
pub const B01011000: u32 = 88;
pub const B1011001: u32 = 89;
pub const B01011001: u32 = 89;
pub const B1011010: u32 = 90;
pub const B01011010: u32 = 90;
pub const B1011011: u32 = 91;
pub const B01011011: u32 = 91;
pub const B1011100: u32 = 92;
pub const B01011100: u32 = 92;
pub const B1011101: u32 = 93;
pub const B01011101: u32 = 93;
pub const B1011110: u32 = 94;
pub const B01011110: u32 = 94;
pub const B1011111: u32 = 95;
pub const B01011111: u32 = 95;
pub const B1100000: u32 = 96;
pub const B01100000: u32 = 96;
pub const B1100001: u32 = 97;
pub const B01100001: u32 = 97;
pub const B1100010: u32 = 98;
pub const B01100010: u32 = 98;
pub const B1100011: u32 = 99;
pub const B01100011: u32 = 99;
pub const B1100100: u32 = 100;
pub const B01100100: u32 = 100;
pub const B1100101: u32 = 101;
pub const B01100101: u32 = 101;
pub const B1100110: u32 = 102;
pub const B01100110: u32 = 102;
pub const B1100111: u32 = 103;
pub const B01100111: u32 = 103;
pub const B1101000: u32 = 104;
pub const B01101000: u32 = 104;
pub const B1101001: u32 = 105;
pub const B01101001: u32 = 105;
pub const B1101010: u32 = 106;
pub const B01101010: u32 = 106;
pub const B1101011: u32 = 107;
pub const B01101011: u32 = 107;
pub const B1101100: u32 = 108;
pub const B01101100: u32 = 108;
pub const B1101101: u32 = 109;
pub const B01101101: u32 = 109;
pub const B1101110: u32 = 110;
pub const B01101110: u32 = 110;
pub const B1101111: u32 = 111;
pub const B01101111: u32 = 111;
pub const B1110000: u32 = 112;
pub const B01110000: u32 = 112;
pub const B1110001: u32 = 113;
pub const B01110001: u32 = 113;
pub const B1110010: u32 = 114;
pub const B01110010: u32 = 114;
pub const B1110011: u32 = 115;
pub const B01110011: u32 = 115;
pub const B1110100: u32 = 116;
pub const B01110100: u32 = 116;
pub const B1110101: u32 = 117;
pub const B01110101: u32 = 117;
pub const B1110110: u32 = 118;
pub const B01110110: u32 = 118;
pub const B1110111: u32 = 119;
pub const B01110111: u32 = 119;
pub const B1111000: u32 = 120;
pub const B01111000: u32 = 120;
pub const B1111001: u32 = 121;
pub const B01111001: u32 = 121;
pub const B1111010: u32 = 122;
pub const B01111010: u32 = 122;
pub const B1111011: u32 = 123;
pub const B01111011: u32 = 123;
pub const B1111100: u32 = 124;
pub const B01111100: u32 = 124;
pub const B1111101: u32 = 125;
pub const B01111101: u32 = 125;
pub const B1111110: u32 = 126;
pub const B01111110: u32 = 126;
pub const B1111111: u32 = 127;
pub const B01111111: u32 = 127;
pub const B10000000: u32 = 128;
pub const B10000001: u32 = 129;
pub const B10000010: u32 = 130;
pub const B10000011: u32 = 131;
pub const B10000100: u32 = 132;
pub const B10000101: u32 = 133;
pub const B10000110: u32 = 134;
pub const B10000111: u32 = 135;
pub const B10001000: u32 = 136;
pub const B10001001: u32 = 137;
pub const B10001010: u32 = 138;
pub const B10001011: u32 = 139;
pub const B10001100: u32 = 140;
pub const B10001101: u32 = 141;
pub const B10001110: u32 = 142;
pub const B10001111: u32 = 143;
pub const B10010000: u32 = 144;
pub const B10010001: u32 = 145;
pub const B10010010: u32 = 146;
pub const B10010011: u32 = 147;
pub const B10010100: u32 = 148;
pub const B10010101: u32 = 149;
pub const B10010110: u32 = 150;
pub const B10010111: u32 = 151;
pub const B10011000: u32 = 152;
pub const B10011001: u32 = 153;
pub const B10011010: u32 = 154;
pub const B10011011: u32 = 155;
pub const B10011100: u32 = 156;
pub const B10011101: u32 = 157;
pub const B10011110: u32 = 158;
pub const B10011111: u32 = 159;
pub const B10100000: u32 = 160;
pub const B10100001: u32 = 161;
pub const B10100010: u32 = 162;
pub const B10100011: u32 = 163;
pub const B10100100: u32 = 164;
pub const B10100101: u32 = 165;
pub const B10100110: u32 = 166;
pub const B10100111: u32 = 167;
pub const B10101000: u32 = 168;
pub const B10101001: u32 = 169;
pub const B10101010: u32 = 170;
pub const B10101011: u32 = 171;
pub const B10101100: u32 = 172;
pub const B10101101: u32 = 173;
pub const B10101110: u32 = 174;
pub const B10101111: u32 = 175;
pub const B10110000: u32 = 176;
pub const B10110001: u32 = 177;
pub const B10110010: u32 = 178;
pub const B10110011: u32 = 179;
pub const B10110100: u32 = 180;
pub const B10110101: u32 = 181;
pub const B10110110: u32 = 182;
pub const B10110111: u32 = 183;
pub const B10111000: u32 = 184;
pub const B10111001: u32 = 185;
pub const B10111010: u32 = 186;
pub const B10111011: u32 = 187;
pub const B10111100: u32 = 188;
pub const B10111101: u32 = 189;
pub const B10111110: u32 = 190;
pub const B10111111: u32 = 191;
pub const B11000000: u32 = 192;
pub const B11000001: u32 = 193;
pub const B11000010: u32 = 194;
pub const B11000011: u32 = 195;
pub const B11000100: u32 = 196;
pub const B11000101: u32 = 197;
pub const B11000110: u32 = 198;
pub const B11000111: u32 = 199;
pub const B11001000: u32 = 200;
pub const B11001001: u32 = 201;
pub const B11001010: u32 = 202;
pub const B11001011: u32 = 203;
pub const B11001100: u32 = 204;
pub const B11001101: u32 = 205;
pub const B11001110: u32 = 206;
pub const B11001111: u32 = 207;
pub const B11010000: u32 = 208;
pub const B11010001: u32 = 209;
pub const B11010010: u32 = 210;
pub const B11010011: u32 = 211;
pub const B11010100: u32 = 212;
pub const B11010101: u32 = 213;
pub const B11010110: u32 = 214;
pub const B11010111: u32 = 215;
pub const B11011000: u32 = 216;
pub const B11011001: u32 = 217;
pub const B11011010: u32 = 218;
pub const B11011011: u32 = 219;
pub const B11011100: u32 = 220;
pub const B11011101: u32 = 221;
pub const B11011110: u32 = 222;
pub const B11011111: u32 = 223;
pub const B11100000: u32 = 224;
pub const B11100001: u32 = 225;
pub const B11100010: u32 = 226;
pub const B11100011: u32 = 227;
pub const B11100100: u32 = 228;
pub const B11100101: u32 = 229;
pub const B11100110: u32 = 230;
pub const B11100111: u32 = 231;
pub const B11101000: u32 = 232;
pub const B11101001: u32 = 233;
pub const B11101010: u32 = 234;
pub const B11101011: u32 = 235;
pub const B11101100: u32 = 236;
pub const B11101101: u32 = 237;
pub const B11101110: u32 = 238;
pub const B11101111: u32 = 239;
pub const B11110000: u32 = 240;
pub const B11110001: u32 = 241;
pub const B11110010: u32 = 242;
pub const B11110011: u32 = 243;
pub const B11110100: u32 = 244;
pub const B11110101: u32 = 245;
pub const B11110110: u32 = 246;
pub const B11110111: u32 = 247;
pub const B11111000: u32 = 248;
pub const B11111001: u32 = 249;
pub const B11111010: u32 = 250;
pub const B11111011: u32 = 251;
pub const B11111100: u32 = 252;
pub const B11111101: u32 = 253;
pub const B11111110: u32 = 254;
pub const B11111111: u32 = 255;
pub const NVIC_NUM_INTERRUPTS: u32 = 100;
pub const DMA_NUM_CHANNELS: u32 = 32;
pub const DMAMUX_SOURCE_TSI: u32 = 1;
pub const DMAMUX_SOURCE_UART0_RX: u32 = 2;
pub const DMAMUX_SOURCE_UART0_TX: u32 = 3;
pub const DMAMUX_SOURCE_UART1_RX: u32 = 4;
pub const DMAMUX_SOURCE_UART1_TX: u32 = 5;
pub const DMAMUX_SOURCE_UART2_RX: u32 = 6;
pub const DMAMUX_SOURCE_UART2_TX: u32 = 7;
pub const DMAMUX_SOURCE_UART3_RX: u32 = 8;
pub const DMAMUX_SOURCE_UART3_TX: u32 = 9;
pub const DMAMUX_SOURCE_UART4_RXTX: u32 = 10;
pub const DMAMUX_SOURCE_I2S0_RX: u32 = 12;
pub const DMAMUX_SOURCE_I2S0_TX: u32 = 13;
pub const DMAMUX_SOURCE_SPI0_RX: u32 = 14;
pub const DMAMUX_SOURCE_SPI0_TX: u32 = 15;
pub const DMAMUX_SOURCE_SPI1_RX: u32 = 16;
pub const DMAMUX_SOURCE_SPI1_TX: u32 = 17;
pub const DMAMUX_SOURCE_I2C0: u32 = 18;
pub const DMAMUX_SOURCE_I2C3: u32 = 18;
pub const DMAMUX_SOURCE_I2C1: u32 = 19;
pub const DMAMUX_SOURCE_I2C2: u32 = 19;
pub const DMAMUX_SOURCE_FTM0_CH0: u32 = 20;
pub const DMAMUX_SOURCE_FTM0_CH1: u32 = 21;
pub const DMAMUX_SOURCE_FTM0_CH2: u32 = 22;
pub const DMAMUX_SOURCE_FTM0_CH3: u32 = 23;
pub const DMAMUX_SOURCE_FTM0_CH4: u32 = 24;
pub const DMAMUX_SOURCE_FTM0_CH5: u32 = 25;
pub const DMAMUX_SOURCE_FTM0_CH6: u32 = 26;
pub const DMAMUX_SOURCE_FTM0_CH7: u32 = 27;
pub const DMAMUX_SOURCE_FTM1_CH0: u32 = 28;
pub const DMAMUX_SOURCE_TPM1_CH0: u32 = 28;
pub const DMAMUX_SOURCE_FTM1_CH1: u32 = 29;
pub const DMAMUX_SOURCE_TPM1_CH1: u32 = 29;
pub const DMAMUX_SOURCE_FTM2_CH0: u32 = 30;
pub const DMAMUX_SOURCE_TPM2_CH0: u32 = 30;
pub const DMAMUX_SOURCE_FTM2_CH1: u32 = 31;
pub const DMAMUX_SOURCE_TPM2_CH1: u32 = 31;
pub const DMAMUX_SOURCE_FTM3_CH0: u32 = 32;
pub const DMAMUX_SOURCE_FTM3_CH1: u32 = 33;
pub const DMAMUX_SOURCE_FTM3_CH2: u32 = 34;
pub const DMAMUX_SOURCE_FTM3_CH3: u32 = 35;
pub const DMAMUX_SOURCE_FTM3_CH4: u32 = 36;
pub const DMAMUX_SOURCE_FTM3_CH5: u32 = 37;
pub const DMAMUX_SOURCE_FTM3_CH6: u32 = 38;
pub const DMAMUX_SOURCE_SPI2_RX: u32 = 38;
pub const DMAMUX_SOURCE_FTM3_CH7: u32 = 39;
pub const DMAMUX_SOURCE_SPI2_TX: u32 = 39;
pub const DMAMUX_SOURCE_ADC0: u32 = 40;
pub const DMAMUX_SOURCE_ADC1: u32 = 41;
pub const DMAMUX_SOURCE_CMP0: u32 = 42;
pub const DMAMUX_SOURCE_CMP1: u32 = 43;
pub const DMAMUX_SOURCE_CMP2: u32 = 44;
pub const DMAMUX_SOURCE_CMP3: u32 = 44;
pub const DMAMUX_SOURCE_DAC0: u32 = 45;
pub const DMAMUX_SOURCE_DAC1: u32 = 46;
pub const DMAMUX_SOURCE_CMT: u32 = 47;
pub const DMAMUX_SOURCE_PDB: u32 = 48;
pub const DMAMUX_SOURCE_PORTA: u32 = 49;
pub const DMAMUX_SOURCE_PORTB: u32 = 50;
pub const DMAMUX_SOURCE_PORTC: u32 = 51;
pub const DMAMUX_SOURCE_PORTD: u32 = 52;
pub const DMAMUX_SOURCE_PORTE: u32 = 53;
pub const DMAMUX_SOURCE_IEEE1588_T0: u32 = 54;
pub const DMAMUX_SOURCE_IEEE1588_T1: u32 = 55;
pub const DMAMUX_SOURCE_FTM1_OV: u32 = 55;
pub const DMAMUX_SOURCE_IEEE1588_T2: u32 = 56;
pub const DMAMUX_SOURCE_FTM2_OV: u32 = 56;
pub const DMAMUX_SOURCE_IEEE1588_T3: u32 = 57;
pub const DMAMUX_SOURCE_LPUART0_RX: u32 = 58;
pub const DMAMUX_SOURCE_LPUART0_TX: u32 = 59;
pub const DMAMUX_SOURCE_ALWAYS0: u32 = 60;
pub const DMAMUX_SOURCE_ALWAYS1: u32 = 61;
pub const DMAMUX_SOURCE_ALWAYS2: u32 = 62;
pub const DMAMUX_SOURCE_ALWAYS3: u32 = 63;
pub const DMAMUX_NUM_SOURCE_ALWAYS: u32 = 4;
pub const F_PLL: u32 = 180000000;
pub const F_BUS: u32 = 60000000;
pub const F_MEM: u32 = 25714286;
pub const DMAMUX_DISABLE: u32 = 0;
pub const DMAMUX_TRIG: u32 = 64;
pub const DMAMUX_ENABLE: u32 = 128;
pub const DMA_TCD_ATTR_SIZE_8BIT: u32 = 0;
pub const DMA_TCD_ATTR_SIZE_16BIT: u32 = 1;
pub const DMA_TCD_ATTR_SIZE_32BIT: u32 = 2;
pub const DMA_TCD_ATTR_SIZE_16BYTE: u32 = 4;
pub const DMA_TCD_ATTR_SIZE_32BYTE: u32 = 5;
pub const DMA_TCD_CSR_BWC_MASK: u32 = 49152;
pub const DMA_TCD_CSR_MAJORLINKCH_MASK: u32 = 3840;
pub const DMA_TCD_CSR_DONE: u32 = 128;
pub const DMA_TCD_CSR_ACTIVE: u32 = 64;
pub const DMA_TCD_CSR_MAJORELINK: u32 = 32;
pub const DMA_TCD_CSR_ESG: u32 = 16;
pub const DMA_TCD_CSR_DREQ: u32 = 8;
pub const DMA_TCD_CSR_INTHALF: u32 = 4;
pub const DMA_TCD_CSR_INTMAJOR: u32 = 2;
pub const DMA_TCD_CSR_START: u32 = 1;
pub const DMA_TCD_BITER_ELINKYES_ELINK: u32 = 32768;
pub const DMA_TCD_BITER_ELINKYES_LINKCH_MASK: u32 = 7680;
pub const DMA_TCD_BITER_ELINKYES_BITER_MASK: u32 = 511;
pub const DMA_TCD_CITER_ELINKYES_ELINK: u32 = 32768;
pub const DMA_TCD_CITER_ELINKYES_LINKCH_MASK: u32 = 7680;
pub const DMA_TCD_CITER_ELINKYES_CITER_MASK: u32 = 511;
pub const DAC_SR_DACBFWMF: u32 = 4;
pub const DAC_SR_DACBFRTF: u32 = 2;
pub const DAC_SR_DACBFRBF: u32 = 1;
pub const DAC_C0_DACEN: u32 = 128;
pub const DAC_C0_DACRFS: u32 = 64;
pub const DAC_C0_DACTRGSEL: u32 = 32;
pub const DAC_C0_DACSWTRG: u32 = 16;
pub const DAC_C0_LPEN: u32 = 8;
pub const DAC_C0_DACBWIEN: u32 = 4;
pub const DAC_C0_DACBTIEN: u32 = 2;
pub const DAC_C0_DACBBIEN: u32 = 1;
pub const DAC_C1_DMAEN: u32 = 128;
pub const DAC_C1_DACBFEN: u32 = 1;
pub const VREF_SC_MODE_LV_BANDGAPONLY: u32 = 0;
pub const VREF_SC_MODE_LV_HIGHPOWERBUF: u32 = 1;
pub const VREF_SC_MODE_LV_LOWPOWERBUF: u32 = 2;
pub const PDB_SC_PDBEIE: u32 = 131072;
pub const PDB_SC_SWTRIG: u32 = 65536;
pub const PDB_SC_DMAEN: u32 = 32768;
pub const PDB_SC_PDBEN: u32 = 128;
pub const PDB_SC_PDBIF: u32 = 64;
pub const PDB_SC_PDBIE: u32 = 32;
pub const PDB_SC_CONT: u32 = 2;
pub const PDB_SC_LDOK: u32 = 1;
pub const PDB_DACINTC_EXT: u32 = 2;
pub const PDB_DACINTC_TOE: u32 = 1;
pub const FTM_SC_TOF: u32 = 128;
pub const FTM_SC_TOIE: u32 = 64;
pub const FTM_SC_CPWMS: u32 = 32;
pub const FTM_SC_CLKS_MASK: u32 = 24;
pub const FTM_SC_PS_MASK: u32 = 7;
pub const FTM_CSC_CHF: u32 = 128;
pub const FTM_CSC_CHIE: u32 = 64;
pub const FTM_CSC_MSB: u32 = 32;
pub const FTM_CSC_MSA: u32 = 16;
pub const FTM_CSC_ELSB: u32 = 8;
pub const FTM_CSC_ELSA: u32 = 4;
pub const FTM_CSC_DMA: u32 = 1;
pub const FTM_STATUS_CH7F: u32 = 128;
pub const FTM_STATUS_CH6F: u32 = 64;
pub const FTM_STATUS_CH5F: u32 = 32;
pub const FTM_STATUS_CH4F: u32 = 16;
pub const FTM_STATUS_CH3F: u32 = 8;
pub const FTM_STATUS_CH2F: u32 = 4;
pub const FTM_STATUS_CH1F: u32 = 2;
pub const FTM_STATUS_CH0F: u32 = 1;
pub const FTM_MODE_FAULTIE: u32 = 128;
pub const FTM_MODE_FAULTM_MASK: u32 = 96;
pub const FTM_MODE_CAPTEST: u32 = 16;
pub const FTM_MODE_PWMSYNC: u32 = 8;
pub const FTM_MODE_WPDIS: u32 = 4;
pub const FTM_MODE_INIT: u32 = 2;
pub const FTM_MODE_FTMEN: u32 = 1;
pub const FTM_SYNC_SWSYNC: u32 = 128;
pub const FTM_SYNC_TRIG2: u32 = 64;
pub const FTM_SYNC_TRIG1: u32 = 32;
pub const FTM_SYNC_TRIG0: u32 = 16;
pub const FTM_SYNC_SYNCHOM: u32 = 8;
pub const FTM_SYNC_REINIT: u32 = 4;
pub const FTM_SYNC_CNTMAX: u32 = 2;
pub const FTM_SYNC_CNTMIN: u32 = 1;
pub const FTM_OUTINIT_CH7OI: u32 = 128;
pub const FTM_OUTINIT_CH6OI: u32 = 64;
pub const FTM_OUTINIT_CH5OI: u32 = 32;
pub const FTM_OUTINIT_CH4OI: u32 = 16;
pub const FTM_OUTINIT_CH3OI: u32 = 8;
pub const FTM_OUTINIT_CH2OI: u32 = 4;
pub const FTM_OUTINIT_CH1OI: u32 = 2;
pub const FTM_OUTINIT_CH0OI: u32 = 1;
pub const FTM_OUTMASK_CH7OM: u32 = 128;
pub const FTM_OUTMASK_CH6OM: u32 = 64;
pub const FTM_OUTMASK_CH5OM: u32 = 32;
pub const FTM_OUTMASK_CH4OM: u32 = 16;
pub const FTM_OUTMASK_CH3OM: u32 = 8;
pub const FTM_OUTMASK_CH2OM: u32 = 4;
pub const FTM_OUTMASK_CH1OM: u32 = 2;
pub const FTM_OUTMASK_CH0OM: u32 = 1;
pub const FTM_COMBINE_FAULTEN3: u32 = 1073741824;
pub const FTM_COMBINE_SYNCEN3: u32 = 536870912;
pub const FTM_COMBINE_DTEN3: u32 = 268435456;
pub const FTM_COMBINE_DECAP3: u32 = 134217728;
pub const FTM_COMBINE_DECAPEN3: u32 = 67108864;
pub const FTM_COMBINE_COMP3: u32 = 33554432;
pub const FTM_COMBINE_COMBINE3: u32 = 16777216;
pub const FTM_COMBINE_FAULTEN2: u32 = 4194304;
pub const FTM_COMBINE_SYNCEN2: u32 = 2097152;
pub const FTM_COMBINE_DTEN2: u32 = 1048576;
pub const FTM_COMBINE_DECAP2: u32 = 524288;
pub const FTM_COMBINE_DECAPEN2: u32 = 262144;
pub const FTM_COMBINE_COMP2: u32 = 131072;
pub const FTM_COMBINE_COMBINE2: u32 = 65536;
pub const FTM_COMBINE_FAULTEN1: u32 = 16384;
pub const FTM_COMBINE_SYNCEN1: u32 = 8192;
pub const FTM_COMBINE_DTEN1: u32 = 4096;
pub const FTM_COMBINE_DECAP1: u32 = 2048;
pub const FTM_COMBINE_DECAPEN1: u32 = 1024;
pub const FTM_COMBINE_COMP1: u32 = 512;
pub const FTM_COMBINE_COMBINE1: u32 = 256;
pub const FTM_COMBINE_FAULTEN0: u32 = 64;
pub const FTM_COMBINE_SYNCEN0: u32 = 32;
pub const FTM_COMBINE_DTEN0: u32 = 16;
pub const FTM_COMBINE_DECAP0: u32 = 8;
pub const FTM_COMBINE_DECAPEN0: u32 = 4;
pub const FTM_COMBINE_COMP0: u32 = 2;
pub const FTM_COMBINE_COMBINE0: u32 = 1;
pub const FTM_DEADTIME_DTPS_MASK: u32 = 192;
pub const FTM_DEADTIME_DTVAL_MASK: u32 = 63;
pub const FTM_EXTTRIG_TRIGF: u32 = 128;
pub const FTM_EXTTRIG_INITTRIGEN: u32 = 64;
pub const FTM_EXTTRIG_CH1TRIG: u32 = 32;
pub const FTM_EXTTRIG_CH0TRIG: u32 = 16;
pub const FTM_EXTTRIG_CH5TRIG: u32 = 8;
pub const FTM_EXTTRIG_CH4TRIG: u32 = 4;
pub const FTM_EXTTRIG_CH3TRIG: u32 = 2;
pub const FTM_EXTTRIG_CH2TRIG: u32 = 1;
pub const FTM_POL_POL7: u32 = 128;
pub const FTM_POL_POL6: u32 = 64;
pub const FTM_POL_POL5: u32 = 32;
pub const FTM_POL_POL4: u32 = 16;
pub const FTM_POL_POL3: u32 = 8;
pub const FTM_POL_POL2: u32 = 4;
pub const FTM_POL_POL1: u32 = 2;
pub const FTM_POL_POL0: u32 = 1;
pub const FTM_FMS_FAULTF: u32 = 128;
pub const FTM_FMS_WPEN: u32 = 64;
pub const FTM_FMS_FAULTIN: u32 = 32;
pub const FTM_FMS_FAULTF3: u32 = 8;
pub const FTM_FMS_FAULTF2: u32 = 4;
pub const FTM_FMS_FAULTF1: u32 = 2;
pub const FTM_FMS_FAULTF0: u32 = 1;
pub const FTM_FILTER_CH3FVAL_MASK: u32 = 61440;
pub const FTM_FILTER_CH2FVAL_MASK: u32 = 3840;
pub const FTM_FILTER_CH1FVAL_MASK: u32 = 240;
pub const FTM_FILTER_CH0FVAL_MASK: u32 = 15;
pub const FTM_FLTCTRL_FFVAL_MASK: u32 = 3840;
pub const FTM_FLTCTRL_FFLTR3EN: u32 = 128;
pub const FTM_FLTCTRL_FFLTR2EN: u32 = 64;
pub const FTM_FLTCTRL_FFLTR1EN: u32 = 32;
pub const FTM_FLTCTRL_FFLTR0EN: u32 = 16;
pub const FTM_FLTCTRL_FAULT3EN: u32 = 8;
pub const FTM_FLTCTRL_FAULT2EN: u32 = 4;
pub const FTM_FLTCTRL_FAULT1EN: u32 = 2;
pub const FTM_FLTCTRL_FAULT0EN: u32 = 1;
pub const FTM_QDCTRL_PHAFLTREN: u32 = 128;
pub const FTM_QDCTRL_PHBFLTREN: u32 = 64;
pub const FTM_QDCTRL_PHAPOL: u32 = 32;
pub const FTM_QDCTRL_PHBPOL: u32 = 16;
pub const FTM_QDCTRL_QUADMODE: u32 = 8;
pub const FTM_QDCTRL_QUADIR: u32 = 4;
pub const FTM_QDCTRL_TOFDIR: u32 = 2;
pub const FTM_QDCTRL_QUADEN: u32 = 1;
pub const FTM_CONF_GTBEOUT: u32 = 1024;
pub const FTM_CONF_GTBEEN: u32 = 512;
pub const FTM_FLTPOL_FLT3POL: u32 = 8;
pub const FTM_FLTPOL_FLT2POL: u32 = 4;
pub const FTM_FLTPOL_FLT1POL: u32 = 2;
pub const FTM_FLTPOL_FLT0POL: u32 = 1;
pub const FTM_SYNCONF_HWSOC: u32 = 1048576;
pub const FTM_SYNCONF_HWINVC: u32 = 524288;
pub const FTM_SYNCONF_HWOM: u32 = 262144;
pub const FTM_SYNCONF_HWWRBUF: u32 = 131072;
pub const FTM_SYNCONF_HWRSTCNT: u32 = 65536;
pub const FTM_SYNCONF_SWSOC: u32 = 4096;
pub const FTM_SYNCONF_SWINVC: u32 = 2048;
pub const FTM_SYNCONF_SWOM: u32 = 1024;
pub const FTM_SYNCONF_SWWRBUF: u32 = 512;
pub const FTM_SYNCONF_SWRSTCNT: u32 = 256;
pub const FTM_SYNCONF_SYNCMODE: u32 = 128;
pub const FTM_SYNCONF_SWOC: u32 = 32;
pub const FTM_SYNCONF_INVC: u32 = 16;
pub const FTM_SYNCONF_CNTINC: u32 = 4;
pub const FTM_SYNCONF_HWTRIGMODE: u32 = 1;
pub const FTM_INVCTRL_INV3EN: u32 = 8;
pub const FTM_INVCTRL_INV2EN: u32 = 4;
pub const FTM_INVCTRL_INV1EN: u32 = 2;
pub const FTM_INVCTRL_INV0EN: u32 = 1;
pub const FTM_SWOCTRL_CH7OCV: u32 = 32768;
pub const FTM_SWOCTRL_CH6OCV: u32 = 16384;
pub const FTM_SWOCTRL_CH5OCV: u32 = 8192;
pub const FTM_SWOCTRL_CH4OCV: u32 = 4096;
pub const FTM_SWOCTRL_CH3OCV: u32 = 2048;
pub const FTM_SWOCTRL_CH2OCV: u32 = 1024;
pub const FTM_SWOCTRL_CH1OCV: u32 = 512;
pub const FTM_SWOCTRL_CH0OCV: u32 = 256;
pub const FTM_SWOCTRL_CH7OC: u32 = 128;
pub const FTM_SWOCTRL_CH6OC: u32 = 64;
pub const FTM_SWOCTRL_CH5OC: u32 = 32;
pub const FTM_SWOCTRL_CH4OC: u32 = 16;
pub const FTM_SWOCTRL_CH3OC: u32 = 8;
pub const FTM_SWOCTRL_CH2OC: u32 = 4;
pub const FTM_SWOCTRL_CH1OC: u32 = 2;
pub const FTM_SWOCTRL_CH0OC: u32 = 1;
pub const FTM_PWMLOAD_LDOK: u32 = 512;
pub const FTM_PWMLOAD_CH7SEL: u32 = 128;
pub const FTM_PWMLOAD_CH6SEL: u32 = 64;
pub const FTM_PWMLOAD_CH5SEL: u32 = 32;
pub const FTM_PWMLOAD_CH4SEL: u32 = 16;
pub const FTM_PWMLOAD_CH3SEL: u32 = 8;
pub const FTM_PWMLOAD_CH2SEL: u32 = 4;
pub const FTM_PWMLOAD_CH1SEL: u32 = 2;
pub const FTM_PWMLOAD_CH0SEL: u32 = 1;
pub const PIT_MCR_MDIS: u32 = 2;
pub const PIT_MCR_FRZ: u32 = 1;
pub const PIT_TCTRL_CHN: u32 = 4;
pub const PIT_TCTRL_TIE: u32 = 2;
pub const PIT_TCTRL_TEN: u32 = 1;
pub const PIT_TFLG_TIF: u32 = 1;
pub const LPTMR_CSR_TCF: u32 = 128;
pub const LPTMR_CSR_TIE: u32 = 64;
pub const LPTMR_CSR_TPP: u32 = 8;
pub const LPTMR_CSR_TFC: u32 = 4;
pub const LPTMR_CSR_TMS: u32 = 2;
pub const LPTMR_CSR_TEN: u32 = 1;
pub const LPTMR_PSR_PBYP: u32 = 4;
pub const UART_BDH_SBNS: u32 = 32;
pub const UART_C1_LOOPS: u32 = 128;
pub const UART_C1_UARTSWAI: u32 = 64;
pub const UART_C1_RSRC: u32 = 32;
pub const UART_C1_M: u32 = 16;
pub const UART_C1_WAKE: u32 = 8;
pub const UART_C1_ILT: u32 = 4;
pub const UART_C1_PE: u32 = 2;
pub const UART_C1_PT: u32 = 1;
pub const UART_C2_TIE: u32 = 128;
pub const UART_C2_TCIE: u32 = 64;
pub const UART_C2_RIE: u32 = 32;
pub const UART_C2_ILIE: u32 = 16;
pub const UART_C2_TE: u32 = 8;
pub const UART_C2_RE: u32 = 4;
pub const UART_C2_RWU: u32 = 2;
pub const UART_C2_SBK: u32 = 1;
pub const UART_S1_TDRE: u32 = 128;
pub const UART_S1_TC: u32 = 64;
pub const UART_S1_RDRF: u32 = 32;
pub const UART_S1_IDLE: u32 = 16;
pub const UART_S1_OR: u32 = 8;
pub const UART_S1_NF: u32 = 4;
pub const UART_S1_FE: u32 = 2;
pub const UART_S1_PF: u32 = 1;
pub const UART_S2_LBKDIF: u32 = 128;
pub const UART_S2_RXEDGIF: u32 = 64;
pub const UART_S2_MSBF: u32 = 32;
pub const UART_S2_RXINV: u32 = 16;
pub const UART_S2_RWUID: u32 = 8;
pub const UART_S2_BRK13: u32 = 4;
pub const UART_S2_LBKDE: u32 = 2;
pub const UART_S2_RAF: u32 = 1;
pub const UART_C3_R8: u32 = 128;
pub const UART_C3_T8: u32 = 64;
pub const UART_C3_TXDIR: u32 = 32;
pub const UART_C3_TXINV: u32 = 16;
pub const UART_C3_ORIE: u32 = 8;
pub const UART_C3_NEIE: u32 = 4;
pub const UART_C3_FEIE: u32 = 2;
pub const UART_C3_PEIE: u32 = 1;
pub const UART_C4_MAEN1: u32 = 128;
pub const UART_C4_MAEN2: u32 = 64;
pub const UART_C4_M10: u32 = 32;
pub const UART_C5_TDMAS: u32 = 128;
pub const UART_C5_RDMAS: u32 = 32;
pub const UART_ED_NOISY: u32 = 128;
pub const UART_ED_PARITYE: u32 = 64;
pub const UART_MODEM_RXRTSE: u32 = 8;
pub const UART_MODEM_TXRTSPOL: u32 = 4;
pub const UART_MODEM_TXRTSE: u32 = 2;
pub const UART_MODEM_TXCTSE: u32 = 1;
pub const UART_IR_IREN: u32 = 4;
pub const UART_PFIFO_TXFE: u32 = 128;
pub const UART_PFIFO_RXFE: u32 = 8;
pub const UART_CFIFO_TXFLUSH: u32 = 128;
pub const UART_CFIFO_RXFLUSH: u32 = 64;
pub const UART_CFIFO_RXOFE: u32 = 4;
pub const UART_CFIFO_TXOFE: u32 = 2;
pub const UART_CFIFO_RXUFE: u32 = 1;
pub const UART_SFIFO_TXEMPT: u32 = 128;
pub const UART_SFIFO_RXEMPT: u32 = 64;
pub const UART_SFIFO_RXOF: u32 = 4;
pub const UART_SFIFO_TXOF: u32 = 2;
pub const UART_SFIFO_RXUF: u32 = 1;
pub const UART_C7816_ONACK: u32 = 16;
pub const UART_C7816_ANACK: u32 = 8;
pub const UART_C7816_INIT: u32 = 4;
pub const UART_C7816_TTYPE: u32 = 2;
pub const UART_C7816_ISO_7816E: u32 = 1;
pub const UART_IE7816_WTE: u32 = 128;
pub const UART_IE7816_CWTE: u32 = 64;
pub const UART_IE7816_BWTE: u32 = 32;
pub const UART_IE7816_INITDE: u32 = 16;
pub const UART_IE7816_GTVE: u32 = 4;
pub const UART_IE7816_TXTE: u32 = 2;
pub const UART_IE7816_RXTE: u32 = 1;
pub const UART_IS7816_WT: u32 = 128;
pub const UART_IS7816_CWT: u32 = 64;
pub const UART_IS7816_BWT: u32 = 32;
pub const UART_IS7816_INITD: u32 = 16;
pub const UART_IS7816_GTV: u32 = 4;
pub const UART_IS7816_TXT: u32 = 2;
pub const UART_IS7816_RXT: u32 = 1;
pub const UART_C6_EN709: u32 = 128;
pub const UART_C6_TX709: u32 = 64;
pub const UART_C6_CE: u32 = 32;
pub const UART_C6_CP: u32 = 16;
pub const UART_IE_WBEIE: u32 = 64;
pub const UART_IE_ISDIE: u32 = 32;
pub const UART_IE_PRXIE: u32 = 16;
pub const UART_IE_PTXIE: u32 = 8;
pub const UART_IE_PCTEIE: u32 = 4;
pub const UART_IE_PSIE: u32 = 2;
pub const UART_IE_TXFIE: u32 = 1;
pub const UART_S3_PEF: u32 = 128;
pub const UART_S3_WBEF: u32 = 64;
pub const UART_S3_ISD: u32 = 32;
pub const UART_S3_PRXF: u32 = 16;
pub const UART_S3_PTXF: u32 = 8;
pub const UART_S3_PCTEF: u32 = 4;
pub const UART_S3_PSF: u32 = 2;
pub const UART_S3_TXFF: u32 = 1;
pub const UART_S4_INITF: u32 = 16;
pub const UART_S4_ILCV: u32 = 2;
pub const UART_S4_FE: u32 = 1;
pub const ARM_DEMCR_TRCENA: u32 = 16777216;
pub const ARM_DWT_CTRL_CYCCNTENA: u32 = 1;
pub const PIN_A0: u32 = 14;
pub const PIN_A1: u32 = 15;
pub const PIN_A2: u32 = 16;
pub const PIN_A3: u32 = 17;
pub const PIN_A4: u32 = 18;
pub const PIN_A5: u32 = 19;
pub const PIN_A6: u32 = 20;
pub const PIN_A7: u32 = 21;
pub const PIN_A8: u32 = 22;
pub const PIN_A9: u32 = 23;
pub const PIN_A10: u32 = 64;
pub const PIN_A11: u32 = 65;
pub const PIN_A12: u32 = 31;
pub const PIN_A13: u32 = 32;
pub const PIN_A14: u32 = 33;
pub const PIN_A15: u32 = 34;
pub const PIN_A16: u32 = 35;
pub const PIN_A17: u32 = 36;
pub const PIN_A18: u32 = 37;
pub const PIN_A19: u32 = 38;
pub const PIN_A20: u32 = 39;
pub const PIN_A21: u32 = 66;
pub const PIN_A22: u32 = 67;
pub const PIN_A23: u32 = 49;
pub const PIN_A24: u32 = 50;
pub const PIN_A25: u32 = 68;
pub const PIN_A26: u32 = 69;
pub const LED_BUILTIN: u32 = 13;
pub const PIN_SPI_SS: u32 = 10;
pub const PIN_SPI_MOSI: u32 = 11;
pub const PIN_SPI_MISO: u32 = 12;
pub const PIN_SPI_SCK: u32 = 13;
pub const PIN_WIRE_SDA: u32 = 18;
pub const PIN_WIRE_SCL: u32 = 19;
pub const PIN_SERIAL_RX: u32 = 0;
pub const PIN_SERIAL_TX: u32 = 1;
pub const NOT_AN_INTERRUPT: i32 = -1;
pub const NOT_ON_TIMER: u32 = 0;
pub const HIGH: u32 = 1;
pub const LOW: u32 = 0;
pub const INPUT: u32 = 0;
pub const OUTPUT: u32 = 1;
pub const INPUT_PULLUP: u32 = 2;
pub const INPUT_PULLDOWN: u32 = 3;
pub const OUTPUT_OPENDRAIN: u32 = 4;
pub const INPUT_DISABLE: u32 = 5;
pub const LSBFIRST: u32 = 0;
pub const MSBFIRST: u32 = 1;
pub const CHANGE: u32 = 4;
pub const FALLING: u32 = 2;
pub const RISING: u32 = 3;
pub const CORE_NUM_TOTAL_PINS: u32 = 64;
pub const CORE_NUM_DIGITAL: u32 = 64;
pub const CORE_NUM_INTERRUPT: u32 = 64;
pub const CORE_NUM_ANALOG: u32 = 25;
pub const CORE_NUM_PWM: u32 = 22;
pub const CORE_MAX_PIN_PORTA: u32 = 29;
pub const CORE_MAX_PIN_PORTB: u32 = 23;
pub const CORE_MAX_PIN_PORTC: u32 = 11;
pub const CORE_MAX_PIN_PORTD: u32 = 15;
pub const CORE_MAX_PIN_PORTE: u32 = 26;
pub const CORE_PIN0_BIT: u32 = 16;
pub const CORE_PIN1_BIT: u32 = 17;
pub const CORE_PIN2_BIT: u32 = 0;
pub const CORE_PIN3_BIT: u32 = 12;
pub const CORE_PIN4_BIT: u32 = 13;
pub const CORE_PIN5_BIT: u32 = 7;
pub const CORE_PIN6_BIT: u32 = 4;
pub const CORE_PIN7_BIT: u32 = 2;
pub const CORE_PIN8_BIT: u32 = 3;
pub const CORE_PIN9_BIT: u32 = 3;
pub const CORE_PIN10_BIT: u32 = 4;
pub const CORE_PIN11_BIT: u32 = 6;
pub const CORE_PIN12_BIT: u32 = 7;
pub const CORE_PIN13_BIT: u32 = 5;
pub const CORE_PIN14_BIT: u32 = 1;
pub const CORE_PIN15_BIT: u32 = 0;
pub const CORE_PIN16_BIT: u32 = 0;
pub const CORE_PIN17_BIT: u32 = 1;
pub const CORE_PIN18_BIT: u32 = 3;
pub const CORE_PIN19_BIT: u32 = 2;
pub const CORE_PIN20_BIT: u32 = 5;
pub const CORE_PIN21_BIT: u32 = 6;
pub const CORE_PIN22_BIT: u32 = 1;
pub const CORE_PIN23_BIT: u32 = 2;
pub const CORE_PIN24_BIT: u32 = 26;
pub const CORE_PIN25_BIT: u32 = 5;
pub const CORE_PIN26_BIT: u32 = 14;
pub const CORE_PIN27_BIT: u32 = 15;
pub const CORE_PIN28_BIT: u32 = 16;
pub const CORE_PIN29_BIT: u32 = 18;
pub const CORE_PIN30_BIT: u32 = 19;
pub const CORE_PIN31_BIT: u32 = 10;
pub const CORE_PIN32_BIT: u32 = 11;
pub const CORE_PIN33_BIT: u32 = 24;
pub const CORE_PIN34_BIT: u32 = 25;
pub const CORE_PIN35_BIT: u32 = 8;
pub const CORE_PIN36_BIT: u32 = 9;
pub const CORE_PIN37_BIT: u32 = 10;
pub const CORE_PIN38_BIT: u32 = 11;
pub const CORE_PIN39_BIT: u32 = 17;
pub const CORE_PIN40_BIT: u32 = 28;
pub const CORE_PIN41_BIT: u32 = 29;
pub const CORE_PIN42_BIT: u32 = 26;
pub const CORE_PIN43_BIT: u32 = 20;
pub const CORE_PIN44_BIT: u32 = 22;
pub const CORE_PIN45_BIT: u32 = 23;
pub const CORE_PIN46_BIT: u32 = 21;
pub const CORE_PIN47_BIT: u32 = 8;
pub const CORE_PIN48_BIT: u32 = 9;
pub const CORE_PIN49_BIT: u32 = 4;
pub const CORE_PIN50_BIT: u32 = 5;
pub const CORE_PIN51_BIT: u32 = 14;
pub const CORE_PIN52_BIT: u32 = 13;
pub const CORE_PIN53_BIT: u32 = 12;
pub const CORE_PIN54_BIT: u32 = 15;
pub const CORE_PIN55_BIT: u32 = 11;
pub const CORE_PIN56_BIT: u32 = 10;
pub const CORE_PIN57_BIT: u32 = 11;
pub const CORE_PIN58_BIT: u32 = 0;
pub const CORE_PIN59_BIT: u32 = 1;
pub const CORE_PIN60_BIT: u32 = 2;
pub const CORE_PIN61_BIT: u32 = 3;
pub const CORE_PIN62_BIT: u32 = 4;
pub const CORE_PIN63_BIT: u32 = 5;
pub const CORE_PIN0_BITMASK: u32 = 65536;
pub const CORE_PIN1_BITMASK: u32 = 131072;
pub const CORE_PIN2_BITMASK: u32 = 1;
pub const CORE_PIN3_BITMASK: u32 = 4096;
pub const CORE_PIN4_BITMASK: u32 = 8192;
pub const CORE_PIN5_BITMASK: u32 = 128;
pub const CORE_PIN6_BITMASK: u32 = 16;
pub const CORE_PIN7_BITMASK: u32 = 4;
pub const CORE_PIN8_BITMASK: u32 = 8;
pub const CORE_PIN9_BITMASK: u32 = 8;
pub const CORE_PIN10_BITMASK: u32 = 16;
pub const CORE_PIN11_BITMASK: u32 = 64;
pub const CORE_PIN12_BITMASK: u32 = 128;
pub const CORE_PIN13_BITMASK: u32 = 32;
pub const CORE_PIN14_BITMASK: u32 = 2;
pub const CORE_PIN15_BITMASK: u32 = 1;
pub const CORE_PIN16_BITMASK: u32 = 1;
pub const CORE_PIN17_BITMASK: u32 = 2;
pub const CORE_PIN18_BITMASK: u32 = 8;
pub const CORE_PIN19_BITMASK: u32 = 4;
pub const CORE_PIN20_BITMASK: u32 = 32;
pub const CORE_PIN21_BITMASK: u32 = 64;
pub const CORE_PIN22_BITMASK: u32 = 2;
pub const CORE_PIN23_BITMASK: u32 = 4;
pub const CORE_PIN24_BITMASK: u32 = 67108864;
pub const CORE_PIN25_BITMASK: u32 = 32;
pub const CORE_PIN26_BITMASK: u32 = 16384;
pub const CORE_PIN27_BITMASK: u32 = 32768;
pub const CORE_PIN28_BITMASK: u32 = 65536;
pub const CORE_PIN29_BITMASK: u32 = 262144;
pub const CORE_PIN30_BITMASK: u32 = 524288;
pub const CORE_PIN31_BITMASK: u32 = 1024;
pub const CORE_PIN32_BITMASK: u32 = 2048;
pub const CORE_PIN33_BITMASK: u32 = 16777216;
pub const CORE_PIN34_BITMASK: u32 = 33554432;
pub const CORE_PIN35_BITMASK: u32 = 256;
pub const CORE_PIN36_BITMASK: u32 = 512;
pub const CORE_PIN37_BITMASK: u32 = 1024;
pub const CORE_PIN38_BITMASK: u32 = 2048;
pub const CORE_PIN39_BITMASK: u32 = 131072;
pub const CORE_PIN40_BITMASK: u32 = 268435456;
pub const CORE_PIN41_BITMASK: u32 = 536870912;
pub const CORE_PIN42_BITMASK: u32 = 67108864;
pub const CORE_PIN43_BITMASK: u32 = 1048576;
pub const CORE_PIN44_BITMASK: u32 = 4194304;
pub const CORE_PIN45_BITMASK: u32 = 8388608;
pub const CORE_PIN46_BITMASK: u32 = 2097152;
pub const CORE_PIN47_BITMASK: u32 = 256;
pub const CORE_PIN48_BITMASK: u32 = 512;
pub const CORE_PIN49_BITMASK: u32 = 16;
pub const CORE_PIN50_BITMASK: u32 = 32;
pub const CORE_PIN51_BITMASK: u32 = 16384;
pub const CORE_PIN52_BITMASK: u32 = 8192;
pub const CORE_PIN53_BITMASK: u32 = 4096;
pub const CORE_PIN54_BITMASK: u32 = 32768;
pub const CORE_PIN55_BITMASK: u32 = 2048;
pub const CORE_PIN56_BITMASK: u32 = 1024;
pub const CORE_PIN57_BITMASK: u32 = 2048;
pub const CORE_PIN58_BITMASK: u32 = 1;
pub const CORE_PIN59_BITMASK: u32 = 2;
pub const CORE_PIN60_BITMASK: u32 = 4;
pub const CORE_PIN61_BITMASK: u32 = 8;
pub const CORE_PIN62_BITMASK: u32 = 16;
pub const CORE_PIN63_BITMASK: u32 = 32;
pub const CORE_ADC0_PIN: u32 = 14;
pub const CORE_ADC1_PIN: u32 = 15;
pub const CORE_ADC2_PIN: u32 = 16;
pub const CORE_ADC3_PIN: u32 = 17;
pub const CORE_ADC4_PIN: u32 = 18;
pub const CORE_ADC5_PIN: u32 = 19;
pub const CORE_ADC6_PIN: u32 = 20;
pub const CORE_ADC7_PIN: u32 = 21;
pub const CORE_ADC8_PIN: u32 = 22;
pub const CORE_ADC9_PIN: u32 = 23;
pub const CORE_ADC10_PIN: u32 = 64;
pub const CORE_ADC11_PIN: u32 = 65;
pub const CORE_ADC12_PIN: u32 = 31;
pub const CORE_ADC13_PIN: u32 = 32;
pub const CORE_ADC14_PIN: u32 = 33;
pub const CORE_ADC15_PIN: u32 = 34;
pub const CORE_ADC16_PIN: u32 = 35;
pub const CORE_ADC17_PIN: u32 = 36;
pub const CORE_ADC18_PIN: u32 = 37;
pub const CORE_ADC19_PIN: u32 = 38;
pub const CORE_ADC20_PIN: u32 = 39;
pub const CORE_ADC21_PIN: u32 = 66;
pub const CORE_ADC22_PIN: u32 = 67;
pub const CORE_ADC23_PIN: u32 = 49;
pub const CORE_ADC24_PIN: u32 = 50;
pub const CORE_ADC25_PIN: u32 = 68;
pub const CORE_ADC26_PIN: u32 = 69;
pub const CORE_RXD0_PIN: u32 = 0;
pub const CORE_TXD0_PIN: u32 = 1;
pub const CORE_RXD1_PIN: u32 = 9;
pub const CORE_TXD1_PIN: u32 = 10;
pub const CORE_RXD2_PIN: u32 = 7;
pub const CORE_TXD2_PIN: u32 = 8;
pub const CORE_RXD3_PIN: u32 = 31;
pub const CORE_TXD3_PIN: u32 = 32;
pub const CORE_RXD4_PIN: u32 = 34;
pub const CORE_TXD4_PIN: u32 = 33;
pub const CORE_INT0_PIN: u32 = 0;
pub const CORE_INT1_PIN: u32 = 1;
pub const CORE_INT2_PIN: u32 = 2;
pub const CORE_INT3_PIN: u32 = 3;
pub const CORE_INT4_PIN: u32 = 4;
pub const CORE_INT5_PIN: u32 = 5;
pub const CORE_INT6_PIN: u32 = 6;
pub const CORE_INT7_PIN: u32 = 7;
pub const CORE_INT8_PIN: u32 = 8;
pub const CORE_INT9_PIN: u32 = 9;
pub const CORE_INT10_PIN: u32 = 10;
pub const CORE_INT11_PIN: u32 = 11;
pub const CORE_INT12_PIN: u32 = 12;
pub const CORE_INT13_PIN: u32 = 13;
pub const CORE_INT14_PIN: u32 = 14;
pub const CORE_INT15_PIN: u32 = 15;
pub const CORE_INT16_PIN: u32 = 16;
pub const CORE_INT17_PIN: u32 = 17;
pub const CORE_INT18_PIN: u32 = 18;
pub const CORE_INT19_PIN: u32 = 19;
pub const CORE_INT20_PIN: u32 = 20;
pub const CORE_INT21_PIN: u32 = 21;
pub const CORE_INT22_PIN: u32 = 22;
pub const CORE_INT23_PIN: u32 = 23;
pub const CORE_INT24_PIN: u32 = 24;
pub const CORE_INT25_PIN: u32 = 25;
pub const CORE_INT26_PIN: u32 = 26;
pub const CORE_INT27_PIN: u32 = 27;
pub const CORE_INT28_PIN: u32 = 28;
pub const CORE_INT29_PIN: u32 = 29;
pub const CORE_INT30_PIN: u32 = 30;
pub const CORE_INT31_PIN: u32 = 31;
pub const CORE_INT32_PIN: u32 = 32;
pub const CORE_INT33_PIN: u32 = 33;
pub const CORE_INT34_PIN: u32 = 34;
pub const CORE_INT35_PIN: u32 = 35;
pub const CORE_INT36_PIN: u32 = 36;
pub const CORE_INT37_PIN: u32 = 37;
pub const CORE_INT38_PIN: u32 = 38;
pub const CORE_INT39_PIN: u32 = 39;
pub const CORE_INT40_PIN: u32 = 40;
pub const CORE_INT41_PIN: u32 = 41;
pub const CORE_INT42_PIN: u32 = 42;
pub const CORE_INT43_PIN: u32 = 43;
pub const CORE_INT44_PIN: u32 = 44;
pub const CORE_INT45_PIN: u32 = 45;
pub const CORE_INT46_PIN: u32 = 46;
pub const CORE_INT47_PIN: u32 = 47;
pub const CORE_INT48_PIN: u32 = 48;
pub const CORE_INT49_PIN: u32 = 49;
pub const CORE_INT50_PIN: u32 = 50;
pub const CORE_INT51_PIN: u32 = 51;
pub const CORE_INT52_PIN: u32 = 52;
pub const CORE_INT53_PIN: u32 = 53;
pub const CORE_INT54_PIN: u32 = 54;
pub const CORE_INT55_PIN: u32 = 55;
pub const CORE_INT56_PIN: u32 = 56;
pub const CORE_INT57_PIN: u32 = 57;
pub const CORE_INT58_PIN: u32 = 58;
pub const CORE_INT59_PIN: u32 = 59;
pub const CORE_INT60_PIN: u32 = 60;
pub const CORE_INT61_PIN: u32 = 61;
pub const CORE_INT62_PIN: u32 = 62;
pub const CORE_INT63_PIN: u32 = 63;
pub const CORE_INT_EVERY_PIN: u32 = 1;
pub const CORE_FTM0_CH0_PIN: u32 = 22;
pub const CORE_FTM0_CH1_PIN: u32 = 23;
pub const CORE_FTM0_CH2_PIN: u32 = 9;
pub const CORE_FTM0_CH3_PIN: u32 = 10;
pub const CORE_FTM0_CH4_PIN: u32 = 6;
pub const CORE_FTM0_CH5_PIN: u32 = 20;
pub const CORE_FTM0_CH6_PIN: u32 = 21;
pub const CORE_FTM0_CH7_PIN: u32 = 5;
pub const CORE_FTM1_CH0_PIN: u32 = 3;
pub const CORE_FTM1_CH1_PIN: u32 = 4;
pub const CORE_FTM2_CH0_PIN: u32 = 29;
pub const CORE_FTM2_CH1_PIN: u32 = 30;
pub const CORE_FTM3_CH0_PIN: u32 = 2;
pub const CORE_FTM3_CH1_PIN: u32 = 14;
pub const CORE_FTM3_CH2_PIN: u32 = 7;
pub const CORE_FTM3_CH3_PIN: u32 = 8;
pub const CORE_FTM3_CH4_PIN: u32 = 35;
pub const CORE_FTM3_CH5_PIN: u32 = 36;
pub const CORE_FTM3_CH6_PIN: u32 = 37;
pub const CORE_FTM3_CH7_PIN: u32 = 38;
pub const CORE_TPM1_CH0_PIN: u32 = 16;
pub const CORE_TPM1_CH1_PIN: u32 = 17;
pub const DEFAULT: u32 = 0;
pub const INTERNAL: u32 = 2;
pub const INTERNAL1V2: u32 = 2;
pub const INTERNAL1V1: u32 = 2;
pub const EXTERNAL: u32 = 0;
pub const PI: f64 = 3.141592653589793;
pub const HALF_PI: f64 = 1.5707963267948966;
pub const TWO_PI: f64 = 6.283185307179586;
pub const DEG_TO_RAD: f64 = 0.017453292519943295;
pub const RAD_TO_DEG: f64 = 57.29577951308232;
pub const SERIAL: u32 = 0;
pub const DISPLAY: u32 = 1;
pub const SERIAL_7E1: u32 = 2;
pub const SERIAL_7O1: u32 = 3;
pub const SERIAL_8N1: u32 = 0;
pub const SERIAL_8E1: u32 = 6;
pub const SERIAL_8O1: u32 = 7;
pub const SERIAL_7E1_RXINV: u32 = 18;
pub const SERIAL_7O1_RXINV: u32 = 19;
pub const SERIAL_8N1_RXINV: u32 = 16;
pub const SERIAL_8E1_RXINV: u32 = 22;
pub const SERIAL_8O1_RXINV: u32 = 23;
pub const SERIAL_7E1_TXINV: u32 = 34;
pub const SERIAL_7O1_TXINV: u32 = 35;
pub const SERIAL_8N1_TXINV: u32 = 32;
pub const SERIAL_8E1_TXINV: u32 = 38;
pub const SERIAL_8O1_TXINV: u32 = 39;
pub const SERIAL_7E1_RXINV_TXINV: u32 = 50;
pub const SERIAL_7O1_RXINV_TXINV: u32 = 51;
pub const SERIAL_8N1_RXINV_TXINV: u32 = 48;
pub const SERIAL_8E1_RXINV_TXINV: u32 = 54;
pub const SERIAL_8O1_RXINV_TXINV: u32 = 55;
pub const SERIAL_2STOP_BITS: u32 = 256;
pub const SERIAL_8E2: u32 = 262;
pub const SERIAL_8O2: u32 = 263;
pub const SERIAL_8E2_RXINV: u32 = 278;
pub const SERIAL_8O2_RXINV: u32 = 279;
pub const SERIAL_8E2_TXINV: u32 = 294;
pub const SERIAL_8O2_TXINV: u32 = 295;
pub const SERIAL_8E2_RXINV_TXINV: u32 = 310;
pub const SERIAL_8O2_RXINV_TXINV: u32 = 311;
pub const SERIAL_8N2: u32 = 256;
pub const SERIAL_8N2_RXINV: u32 = 272;
pub const SERIAL_8N2_TXINV: u32 = 288;
pub const SERIAL_8N2_RXINV_TXINV: u32 = 304;
pub type size_t = super::c_uint;
pub type wchar_t = super::c_uint;
#[repr(C)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: super::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __int8_t = super::c_schar;
pub type __uint8_t = super::c_uchar;
pub type __int16_t = super::c_short;
pub type __uint16_t = super::c_ushort;
pub type __int32_t = super::c_int;
pub type __uint32_t = super::c_uint;
pub type __int64_t = super::c_longlong;
pub type __uint64_t = super::c_ulonglong;
pub type __int_least8_t = super::c_schar;
pub type __uint_least8_t = super::c_uchar;
pub type __int_least16_t = super::c_short;
pub type __uint_least16_t = super::c_ushort;
pub type __int_least32_t = super::c_int;
pub type __uint_least32_t = super::c_uint;
pub type __int_least64_t = super::c_longlong;
pub type __uint_least64_t = super::c_ulonglong;
pub type __intptr_t = super::c_int;
pub type __uintptr_t = super::c_uint;
pub type _LOCK_T = super::c_int;
pub type _LOCK_RECURSIVE_T = super::c_int;
pub type __blkcnt_t = super::c_long;
pub type __blksize_t = super::c_long;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint32_t;
pub type _off_t = super::c_long;
pub type __pid_t = super::c_int;
pub type __dev_t = super::c_short;
pub type __uid_t = super::c_ushort;
pub type __gid_t = super::c_ushort;
pub type __id_t = __uint32_t;
pub type __ino_t = super::c_ushort;
pub type __mode_t = __uint32_t;
pub type _off64_t = super::c_longlong;
pub type __off_t = _off_t;
pub type __loff_t = _off64_t;
pub type __key_t = super::c_long;
pub type _fpos_t = super::c_long;
pub type __size_t = super::c_uint;
pub type _ssize_t = super::c_int;
pub type __ssize_t = _ssize_t;
pub type wint_t = super::c_int;
#[repr(C)]
pub struct _mbstate_t {
    pub __count: super::c_int,
    pub __value: _mbstate_t__bindgen_ty_1,
}
#[repr(C)]
pub struct _mbstate_t__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<wint_t>,
    pub __wchb: __BindgenUnionField<[super::c_uchar; 4usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout__mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<_mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout__mbstate_t() {
    assert_eq!(
        ::core::mem::size_of::<_mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(_mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
pub type _flock_t = _LOCK_RECURSIVE_T;
pub type _iconv_t = *mut super::c_void;
pub type __clock_t = super::c_ulong;
pub type __time_t = super::c_long;
pub type __clockid_t = super::c_ulong;
pub type __timer_t = super::c_ulong;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __nlink_t = super::c_ushort;
pub type __suseconds_t = super::c_long;
pub type __useconds_t = super::c_ulong;
pub type __ULong = super::c_ulong;
#[repr(C)]
pub struct __locale_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: super::c_int,
    pub _maxwds: super::c_int,
    pub _sign: super::c_int,
    pub _wds: super::c_int,
    pub _x: [__ULong; 1usize],
}
#[test]
fn bindgen_test_layout__Bigint() {
    assert_eq!(
        ::core::mem::size_of::<_Bigint>(),
        24usize,
        concat!("Size of: ", stringify!(_Bigint))
    );
    assert_eq!(
        ::core::mem::align_of::<_Bigint>(),
        4usize,
        concat!("Alignment of ", stringify!(_Bigint))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Bigint>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Bigint>()))._k as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_k)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Bigint>()))._maxwds as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_maxwds)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Bigint>()))._sign as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Bigint>()))._wds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_wds)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_Bigint>()))._x as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_x)
        )
    );
}
#[repr(C)]
pub struct __tm {
    pub __tm_sec: super::c_int,
    pub __tm_min: super::c_int,
    pub __tm_hour: super::c_int,
    pub __tm_mday: super::c_int,
    pub __tm_mon: super::c_int,
    pub __tm_year: super::c_int,
    pub __tm_wday: super::c_int,
    pub __tm_yday: super::c_int,
    pub __tm_isdst: super::c_int,
}
#[test]
fn bindgen_test_layout___tm() {
    assert_eq!(
        ::core::mem::size_of::<__tm>(),
        36usize,
        concat!("Size of: ", stringify!(__tm))
    );
    assert_eq!(
        ::core::mem::align_of::<__tm>(),
        4usize,
        concat!("Alignment of ", stringify!(__tm))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tm>())).__tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_isdst)
        )
    );
}
#[repr(C)]
pub struct _on_exit_args {
    pub _fnargs: [*mut super::c_void; 32usize],
    pub _dso_handle: [*mut super::c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
#[test]
fn bindgen_test_layout__on_exit_args() {
    assert_eq!(
        ::core::mem::size_of::<_on_exit_args>(),
        264usize,
        concat!("Size of: ", stringify!(_on_exit_args))
    );
    assert_eq!(
        ::core::mem::align_of::<_on_exit_args>(),
        4usize,
        concat!("Alignment of ", stringify!(_on_exit_args))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_on_exit_args>()))._fnargs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_on_exit_args),
            "::",
            stringify!(_fnargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_on_exit_args>()))._dso_handle as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_on_exit_args),
            "::",
            stringify!(_dso_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_on_exit_args>()))._fntypes as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_on_exit_args),
            "::",
            stringify!(_fntypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_on_exit_args>()))._is_cxa as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_on_exit_args),
            "::",
            stringify!(_is_cxa)
        )
    );
}
#[repr(C)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: super::c_int,
    pub _fns: [::core::option::Option<unsafe extern "C" fn()>; 32usize],
    pub _on_exit_args: _on_exit_args,
}
#[test]
fn bindgen_test_layout__atexit() {
    assert_eq!(
        ::core::mem::size_of::<_atexit>(),
        400usize,
        concat!("Size of: ", stringify!(_atexit))
    );
    assert_eq!(
        ::core::mem::align_of::<_atexit>(),
        4usize,
        concat!("Alignment of ", stringify!(_atexit))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_atexit>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_atexit),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_atexit>()))._ind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_atexit),
            "::",
            stringify!(_ind)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_atexit>()))._fns as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_atexit),
            "::",
            stringify!(_fns)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_atexit>()))._on_exit_args as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_atexit),
            "::",
            stringify!(_on_exit_args)
        )
    );
}
#[repr(C)]
pub struct __sbuf {
    pub _base: *mut super::c_uchar,
    pub _size: super::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::core::mem::size_of::<__sbuf>(),
        8usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::core::mem::align_of::<__sbuf>(),
        4usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sbuf>()))._size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
pub struct __sFILE {
    pub _p: *mut super::c_uchar,
    pub _r: super::c_int,
    pub _w: super::c_int,
    pub _flags: super::c_short,
    pub _file: super::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: super::c_int,
    pub _cookie: *mut super::c_void,
    pub _read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut super::c_void,
            arg3: *mut super::c_char,
            arg4: super::c_int,
        ) -> super::c_int,
    >,
    pub _write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut super::c_void,
            arg3: *const super::c_char,
            arg4: super::c_int,
        ) -> super::c_int,
    >,
    pub _seek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut super::c_void,
            arg3: _fpos_t,
            arg4: super::c_int,
        ) -> _fpos_t,
    >,
    pub _close: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut _reent, arg2: *mut super::c_void) -> super::c_int,
    >,
    pub _ub: __sbuf,
    pub _up: *mut super::c_uchar,
    pub _ur: super::c_int,
    pub _ubuf: [super::c_uchar; 3usize],
    pub _nbuf: [super::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: super::c_int,
    pub _offset: _off_t,
    pub _data: *mut _reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: super::c_int,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::core::mem::size_of::<__sFILE>(),
        104usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::core::mem::align_of::<__sFILE>(),
        4usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._r as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._w as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._file as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._read as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._write as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._close as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._up as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._data as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._lock as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._mbstate as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_mbstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sFILE>()))._flags2 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags2)
        )
    );
}
pub type __FILE = __sFILE;
#[repr(C)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: super::c_int,
    pub _iobs: *mut __FILE,
}
#[test]
fn bindgen_test_layout__glue() {
    assert_eq!(
        ::core::mem::size_of::<_glue>(),
        12usize,
        concat!("Size of: ", stringify!(_glue))
    );
    assert_eq!(
        ::core::mem::align_of::<_glue>(),
        4usize,
        concat!("Alignment of ", stringify!(_glue))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_glue>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_glue),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_glue>()))._niobs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_glue),
            "::",
            stringify!(_niobs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_glue>()))._iobs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_glue),
            "::",
            stringify!(_iobs)
        )
    );
}
#[repr(C)]
pub struct _rand48 {
    pub _seed: [super::c_ushort; 3usize],
    pub _mult: [super::c_ushort; 3usize],
    pub _add: super::c_ushort,
}
#[test]
fn bindgen_test_layout__rand48() {
    assert_eq!(
        ::core::mem::size_of::<_rand48>(),
        14usize,
        concat!("Size of: ", stringify!(_rand48))
    );
    assert_eq!(
        ::core::mem::align_of::<_rand48>(),
        2usize,
        concat!("Alignment of ", stringify!(_rand48))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_rand48>()))._seed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rand48),
            "::",
            stringify!(_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_rand48>()))._mult as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_rand48),
            "::",
            stringify!(_mult)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_rand48>()))._add as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_rand48),
            "::",
            stringify!(_add)
        )
    );
}
#[repr(C)]
pub struct _reent {
    pub _errno: super::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: super::c_int,
    pub _emergency: [super::c_char; 25usize],
    pub _unspecified_locale_info: super::c_int,
    pub _locale: *mut __locale_t,
    pub __sdidinit: super::c_int,
    pub __cleanup: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent)>,
    pub _result: *mut _Bigint,
    pub _result_k: super::c_int,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
    pub _cvtlen: super::c_int,
    pub _cvtbuf: *mut super::c_char,
    pub _new: _reent__bindgen_ty_1,
    pub _atexit: *mut _atexit,
    pub _atexit0: _atexit,
    pub _sig_func: *mut ::core::option::Option<unsafe extern "C" fn(arg1: super::c_int)>,
    pub __sglue: _glue,
    pub __sf: [__FILE; 3usize],
}
#[repr(C)]
pub struct _reent__bindgen_ty_1 {
    pub _reent: __BindgenUnionField<_reent__bindgen_ty_1__bindgen_ty_1>,
    pub _unused: __BindgenUnionField<_reent__bindgen_ty_1__bindgen_ty_2>,
    pub bindgen_union_field: [u64; 30usize],
}
#[repr(C)]
pub struct _reent__bindgen_ty_1__bindgen_ty_1 {
    pub _unused_rand: super::c_uint,
    pub _strtok_last: *mut super::c_char,
    pub _asctime_buf: [super::c_char; 26usize],
    pub _localtime_buf: __tm,
    pub _gamma_signgam: super::c_int,
    pub _rand_next: super::c_ulonglong,
    pub _r48: _rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [super::c_char; 8usize],
    pub _signal_buf: [super::c_char; 24usize],
    pub _getdate_err: super::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: super::c_int,
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<_reent__bindgen_ty_1__bindgen_ty_1>(),
        208usize,
        concat!("Size of: ", stringify!(_reent__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_reent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._unused_rand as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_unused_rand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._strtok_last as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_strtok_last)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._asctime_buf as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_asctime_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._localtime_buf
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_localtime_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._gamma_signgam
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_gamma_signgam)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._rand_next as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_rand_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._r48 as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r48)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._mblen_state as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mblen_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._mbtowc_state
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mbtowc_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._wctomb_state
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_wctomb_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._l64a_buf as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_l64a_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._signal_buf as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_signal_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._getdate_err as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_getdate_err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._mbrlen_state
                as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mbrlen_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._mbrtowc_state
                as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mbrtowc_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._mbsrtowcs_state
                as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mbsrtowcs_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._wcrtomb_state
                as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_wcrtomb_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._wcsrtombs_state
                as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_wcsrtombs_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_1>()))._h_errno as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_h_errno)
        )
    );
}
#[repr(C)]
pub struct _reent__bindgen_ty_1__bindgen_ty_2 {
    pub _nextf: [*mut super::c_uchar; 30usize],
    pub _nmalloc: [super::c_uint; 30usize],
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<_reent__bindgen_ty_1__bindgen_ty_2>(),
        240usize,
        concat!("Size of: ", stringify!(_reent__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<_reent__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_2>()))._nextf as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_nextf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent__bindgen_ty_1__bindgen_ty_2>()))._nmalloc as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_nmalloc)
        )
    );
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<_reent__bindgen_ty_1>(),
        240usize,
        concat!("Size of: ", stringify!(_reent__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_reent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_reent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent__bindgen_ty_1>()))._reent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1),
            "::",
            stringify!(_reent)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent__bindgen_ty_1>()))._unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1),
            "::",
            stringify!(_unused)
        )
    );
}
#[test]
fn bindgen_test_layout__reent() {
    assert_eq!(
        ::core::mem::size_of::<_reent>(),
        1064usize,
        concat!("Size of: ", stringify!(_reent))
    );
    assert_eq!(
        ::core::mem::align_of::<_reent>(),
        8usize,
        concat!("Alignment of ", stringify!(_reent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._errno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._stdin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_stdin)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._stdout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_stdout)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._stderr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_stderr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._inc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_inc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._emergency as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_emergency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_reent>()))._unspecified_locale_info as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_unspecified_locale_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._locale as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>())).__sdidinit as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(__sdidinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>())).__cleanup as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(__cleanup)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._result as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._result_k as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_result_k)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._p5s as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_p5s)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._freelist as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_freelist)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._cvtlen as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_cvtlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._cvtbuf as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_cvtbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._new as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_new)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._atexit as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_atexit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._atexit0 as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_atexit0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>()))._sig_func as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_sig_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>())).__sglue as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(__sglue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_reent>())).__sf as *const _ as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(__sf)
        )
    );
}
extern "C" {
    pub static mut _impure_ptr: *mut _reent;
}
extern "C" {
    pub static _global_impure_ptr: *mut _reent;
}
extern "C" {
    pub fn _reclaim_reent(arg1: *mut _reent);
}
#[repr(C)]
pub struct div_t {
    pub quot: super::c_int,
    pub rem: super::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::core::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::core::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
pub struct ldiv_t {
    pub quot: super::c_long,
    pub rem: super::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
pub struct lldiv_t {
    pub quot: super::c_longlong,
    pub rem: super::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const super::c_void, arg2: *const super::c_void) -> super::c_int,
>;
extern "C" {
    pub fn __locale_mb_cur_max() -> super::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: super::c_int) -> super::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_uniform(arg1: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(arg1: *mut super::c_void, arg2: size_t);
}
extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> super::c_int;
}
extern "C" {
    pub fn atof(__nptr: *const super::c_char) -> f64;
}
extern "C" {
    pub fn atoff(__nptr: *const super::c_char) -> f32;
}
extern "C" {
    pub fn atoi(__nptr: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn _atoi_r(arg1: *mut _reent, __nptr: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const super::c_char) -> super::c_long;
}
extern "C" {
    pub fn _atol_r(arg1: *mut _reent, __nptr: *const super::c_char) -> super::c_long;
}
extern "C" {
    pub fn bsearch(
        __key: *const super::c_void,
        __base: *const super::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: __compar_fn_t,
    ) -> *mut super::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: super::c_uint, __size: super::c_uint) -> *mut super::c_void;
}
extern "C" {
    pub fn div(__numer: super::c_int, __denom: super::c_int) -> div_t;
}
extern "C" {
    pub fn exit(__status: super::c_int);
}
extern "C" {
    pub fn free(arg1: *mut super::c_void);
}
extern "C" {
    pub fn getenv(__string: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn _getenv_r(arg1: *mut _reent, __string: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn _findenv(arg1: *const super::c_char, arg2: *mut super::c_int) -> *mut super::c_char;
}
extern "C" {
    pub fn _findenv_r(
        arg1: *mut _reent,
        arg2: *const super::c_char,
        arg3: *mut super::c_int,
    ) -> *mut super::c_char;
}
extern "C" {
    pub static mut suboptarg: *mut super::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut super::c_char,
        arg2: *const *mut super::c_char,
        arg3: *mut *mut super::c_char,
    ) -> super::c_int;
}
extern "C" {
    pub fn labs(arg1: super::c_long) -> super::c_long;
}
extern "C" {
    pub fn ldiv(__numer: super::c_long, __denom: super::c_long) -> ldiv_t;
}
extern "C" {
    pub fn malloc(__size: super::c_uint) -> *mut super::c_void;
}
extern "C" {
    pub fn mblen(arg1: *const super::c_char, arg2: size_t) -> super::c_int;
}
extern "C" {
    pub fn _mblen_r(
        arg1: *mut _reent,
        arg2: *const super::c_char,
        arg3: size_t,
        arg4: *mut _mbstate_t,
    ) -> super::c_int;
}
extern "C" {
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const super::c_char, arg3: size_t) -> super::c_int;
}
extern "C" {
    pub fn _mbtowc_r(
        arg1: *mut _reent,
        arg2: *mut wchar_t,
        arg3: *const super::c_char,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> super::c_int;
}
extern "C" {
    pub fn wctomb(arg1: *mut super::c_char, arg2: wchar_t) -> super::c_int;
}
extern "C" {
    pub fn _wctomb_r(
        arg1: *mut _reent,
        arg2: *mut super::c_char,
        arg3: wchar_t,
        arg4: *mut _mbstate_t,
    ) -> super::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const super::c_char, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_r(
        arg1: *mut _reent,
        arg2: *mut wchar_t,
        arg3: *const super::c_char,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(arg1: *mut super::c_char, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn _wcstombs_r(
        arg1: *mut _reent,
        arg2: *mut super::c_char,
        arg3: *const wchar_t,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut super::c_char) -> super::c_int;
}
extern "C" {
    pub fn mkstemps(arg1: *mut super::c_char, arg2: super::c_int) -> super::c_int;
}
extern "C" {
    pub fn mktemp(arg1: *mut super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn _mkdtemp_r(arg1: *mut _reent, arg2: *mut super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn _mkostemp_r(
        arg1: *mut _reent,
        arg2: *mut super::c_char,
        arg3: super::c_int,
    ) -> super::c_int;
}
extern "C" {
    pub fn _mkostemps_r(
        arg1: *mut _reent,
        arg2: *mut super::c_char,
        arg3: super::c_int,
        arg4: super::c_int,
    ) -> super::c_int;
}
extern "C" {
    pub fn _mkstemp_r(arg1: *mut _reent, arg2: *mut super::c_char) -> super::c_int;
}
extern "C" {
    pub fn _mkstemps_r(
        arg1: *mut _reent,
        arg2: *mut super::c_char,
        arg3: super::c_int,
    ) -> super::c_int;
}
extern "C" {
    pub fn _mktemp_r(arg1: *mut _reent, arg2: *mut super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn qsort(
        __base: *mut super::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn rand() -> super::c_int;
}
extern "C" {
    pub fn realloc(__r: *mut super::c_void, __size: super::c_uint) -> *mut super::c_void;
}
extern "C" {
    pub fn reallocf(__r: *mut super::c_void, __size: size_t) -> *mut super::c_void;
}
extern "C" {
    pub fn realpath(
        path: *const super::c_char,
        resolved_path: *mut super::c_char,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn rpmatch(response: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn srand(__seed: super::c_uint);
}
extern "C" {
    pub fn strtod(__n: *const super::c_char, __end_PTR: *mut *mut super::c_char) -> f64;
}
extern "C" {
    pub fn _strtod_r(
        arg1: *mut _reent,
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(__n: *const super::c_char, __end_PTR: *mut *mut super::c_char) -> f32;
}
extern "C" {
    pub fn strtol(
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
        __base: super::c_int,
    ) -> super::c_long;
}
extern "C" {
    pub fn _strtol_r(
        arg1: *mut _reent,
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
        __base: super::c_int,
    ) -> super::c_long;
}
extern "C" {
    pub fn strtoul(
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
        __base: super::c_int,
    ) -> super::c_ulong;
}
extern "C" {
    pub fn _strtoul_r(
        arg1: *mut _reent,
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
        __base: super::c_int,
    ) -> super::c_ulong;
}
extern "C" {
    pub fn system(__string: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn a64l(__input: *const super::c_char) -> super::c_long;
}
extern "C" {
    pub fn l64a(__input: super::c_long) -> *mut super::c_char;
}
extern "C" {
    pub fn _l64a_r(arg1: *mut _reent, __input: super::c_long) -> *mut super::c_char;
}
extern "C" {
    pub fn on_exit(
        __func: ::core::option::Option<
            unsafe extern "C" fn(arg1: super::c_int, arg2: *mut super::c_void),
        >,
        __arg: *mut super::c_void,
    ) -> super::c_int;
}
extern "C" {
    pub fn _Exit(__status: super::c_int);
}
extern "C" {
    pub fn putenv(__string: *mut super::c_char) -> super::c_int;
}
extern "C" {
    pub fn _putenv_r(arg1: *mut _reent, __string: *mut super::c_char) -> super::c_int;
}
extern "C" {
    pub fn _reallocf_r(
        arg1: *mut _reent,
        arg2: *mut super::c_void,
        arg3: size_t,
    ) -> *mut super::c_void;
}
extern "C" {
    pub fn setenv(
        __string: *const super::c_char,
        __value: *const super::c_char,
        __overwrite: super::c_int,
    ) -> super::c_int;
}
extern "C" {
    pub fn _setenv_r(
        arg1: *mut _reent,
        __string: *const super::c_char,
        __value: *const super::c_char,
        __overwrite: super::c_int,
    ) -> super::c_int;
}
extern "C" {
    pub fn __itoa(
        arg1: super::c_int,
        arg2: *mut super::c_char,
        arg3: super::c_int,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn __utoa(
        arg1: super::c_uint,
        arg2: *mut super::c_char,
        arg3: super::c_int,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn itoa(
        arg1: super::c_int,
        arg2: *mut super::c_char,
        arg3: super::c_int,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn utoa(
        arg1: super::c_uint,
        arg2: *mut super::c_char,
        arg3: super::c_int,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn rand_r(__seed: *mut super::c_uint) -> super::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn _drand48_r(arg1: *mut _reent) -> f64;
}
extern "C" {
    pub fn erand48(arg1: *mut super::c_ushort) -> f64;
}
extern "C" {
    pub fn _erand48_r(arg1: *mut _reent, arg2: *mut super::c_ushort) -> f64;
}
extern "C" {
    pub fn jrand48(arg1: *mut super::c_ushort) -> super::c_long;
}
extern "C" {
    pub fn _jrand48_r(arg1: *mut _reent, arg2: *mut super::c_ushort) -> super::c_long;
}
extern "C" {
    pub fn lcong48(arg1: *mut super::c_ushort);
}
extern "C" {
    pub fn _lcong48_r(arg1: *mut _reent, arg2: *mut super::c_ushort);
}
extern "C" {
    pub fn lrand48() -> super::c_long;
}
extern "C" {
    pub fn _lrand48_r(arg1: *mut _reent) -> super::c_long;
}
extern "C" {
    pub fn mrand48() -> super::c_long;
}
extern "C" {
    pub fn _mrand48_r(arg1: *mut _reent) -> super::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut super::c_ushort) -> super::c_long;
}
extern "C" {
    pub fn _nrand48_r(arg1: *mut _reent, arg2: *mut super::c_ushort) -> super::c_long;
}
extern "C" {
    pub fn seed48(arg1: *mut super::c_ushort) -> *mut super::c_ushort;
}
extern "C" {
    pub fn _seed48_r(arg1: *mut _reent, arg2: *mut super::c_ushort) -> *mut super::c_ushort;
}
extern "C" {
    pub fn srand48(arg1: super::c_long);
}
extern "C" {
    pub fn _srand48_r(arg1: *mut _reent, arg2: super::c_long);
}
extern "C" {
    pub fn initstate(
        arg1: super::c_uint,
        arg2: *mut super::c_char,
        arg3: size_t,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn setstate(arg1: *mut super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn srandom(arg1: super::c_uint);
}
extern "C" {
    pub fn atoll(__nptr: *const super::c_char) -> super::c_longlong;
}
extern "C" {
    pub fn _atoll_r(arg1: *mut _reent, __nptr: *const super::c_char) -> super::c_longlong;
}
extern "C" {
    pub fn llabs(arg1: super::c_longlong) -> super::c_longlong;
}
extern "C" {
    pub fn lldiv(__numer: super::c_longlong, __denom: super::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn strtoll(
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
        __base: super::c_int,
    ) -> super::c_longlong;
}
extern "C" {
    pub fn _strtoll_r(
        arg1: *mut _reent,
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
        __base: super::c_int,
    ) -> super::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
        __base: super::c_int,
    ) -> super::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_r(
        arg1: *mut _reent,
        __n: *const super::c_char,
        __end_PTR: *mut *mut super::c_char,
        __base: super::c_int,
    ) -> super::c_ulonglong;
}
extern "C" {
    pub fn cfree(arg1: *mut super::c_void);
}
extern "C" {
    pub fn unsetenv(__string: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn _unsetenv_r(arg1: *mut _reent, __string: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn posix_memalign(
        arg1: *mut *mut super::c_void,
        arg2: size_t,
        arg3: size_t,
    ) -> super::c_int;
}
extern "C" {
    pub fn _dtoa_r(
        arg1: *mut _reent,
        arg2: f64,
        arg3: super::c_int,
        arg4: super::c_int,
        arg5: *mut super::c_int,
        arg6: *mut super::c_int,
        arg7: *mut *mut super::c_char,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn _malloc_r(arg1: *mut _reent, arg2: size_t) -> *mut super::c_void;
}
extern "C" {
    pub fn _calloc_r(arg1: *mut _reent, arg2: size_t, arg3: size_t) -> *mut super::c_void;
}
extern "C" {
    pub fn _free_r(arg1: *mut _reent, arg2: *mut super::c_void);
}
extern "C" {
    pub fn _realloc_r(
        arg1: *mut _reent,
        arg2: *mut super::c_void,
        arg3: size_t,
    ) -> *mut super::c_void;
}
extern "C" {
    pub fn _mstats_r(arg1: *mut _reent, arg2: *mut super::c_char);
}
extern "C" {
    pub fn _system_r(arg1: *mut _reent, arg2: *const super::c_char) -> super::c_int;
}
extern "C" {
    #[link_name = "\u{1}__bsd_qsort_r"]
    pub fn qsort_r(
        __base: *mut super::c_void,
        __nmemb: size_t,
        __size: size_t,
        __thunk: *mut super::c_void,
        _compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super::c_void,
                arg2: *const super::c_void,
                arg3: *const super::c_void,
            ) -> super::c_int,
        >,
    );
}
extern "C" {
    pub fn _strtold_r(
        arg1: *mut _reent,
        arg2: *const super::c_char,
        arg3: *mut *mut super::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtold(arg1: *const super::c_char, arg2: *mut *mut super::c_char) -> f64;
}
extern "C" {
    pub fn aligned_alloc(arg1: size_t, arg2: size_t) -> *mut super::c_void;
}
extern "C" {
    pub fn at_quick_exit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> super::c_int;
}
extern "C" {
    pub fn quick_exit(arg1: super::c_int);
}
pub type locale_t = *mut __locale_t;
extern "C" {
    pub fn memchr(
        arg1: *const super::c_void,
        arg2: super::c_int,
        arg3: super::c_uint,
    ) -> *mut super::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const super::c_void,
        arg2: *const super::c_void,
        arg3: super::c_uint,
    ) -> super::c_int;
}
extern "C" {
    pub fn memcpy(
        arg1: *mut super::c_void,
        arg2: *const super::c_void,
        arg3: super::c_uint,
    ) -> *mut super::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut super::c_void,
        arg2: *const super::c_void,
        arg3: super::c_uint,
    ) -> *mut super::c_void;
}
extern "C" {
    pub fn memset(
        arg1: *mut super::c_void,
        arg2: super::c_int,
        arg3: super::c_uint,
    ) -> *mut super::c_void;
}
extern "C" {
    pub fn strcat(arg1: *mut super::c_char, arg2: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strchr(arg1: *const super::c_char, arg2: super::c_int) -> *mut super::c_char;
}
extern "C" {
    pub fn strcmp(arg1: *const super::c_char, arg2: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const super::c_char, arg2: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn strcpy(arg1: *mut super::c_char, arg2: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strcspn(arg1: *const super::c_char, arg2: *const super::c_char) -> super::c_uint;
}
extern "C" {
    pub fn strerror(arg1: super::c_int) -> *mut super::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const super::c_char) -> super::c_uint;
}
extern "C" {
    pub fn strncat(
        arg1: *mut super::c_char,
        arg2: *const super::c_char,
        arg3: super::c_uint,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn strncmp(
        arg1: *const super::c_char,
        arg2: *const super::c_char,
        arg3: super::c_uint,
    ) -> super::c_int;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut super::c_char,
        arg2: *const super::c_char,
        arg3: super::c_uint,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn strpbrk(arg1: *const super::c_char, arg2: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strrchr(arg1: *const super::c_char, arg2: super::c_int) -> *mut super::c_char;
}
extern "C" {
    pub fn strspn(arg1: *const super::c_char, arg2: *const super::c_char) -> super::c_uint;
}
extern "C" {
    pub fn strstr(arg1: *const super::c_char, arg2: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strtok(arg1: *mut super::c_char, arg2: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut super::c_char,
        arg2: *const super::c_char,
        arg3: super::c_uint,
    ) -> super::c_uint;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const super::c_char,
        arg2: *const super::c_char,
        arg3: locale_t,
    ) -> super::c_int;
}
extern "C" {
    pub fn strerror_l(arg1: super::c_int, arg2: locale_t) -> *mut super::c_char;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut super::c_char,
        arg2: *const super::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut super::c_char,
        arg2: *const super::c_char,
        arg3: *mut *mut super::c_char,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn bcmp(
        arg1: *const super::c_void,
        arg2: *const super::c_void,
        arg3: super::c_uint,
    ) -> super::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const super::c_void, arg2: *mut super::c_void, arg3: size_t);
}
extern "C" {
    pub fn bzero(arg1: *mut super::c_void, arg2: super::c_uint);
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut super::c_void, arg2: size_t);
}
extern "C" {
    pub fn timingsafe_bcmp(
        arg1: *const super::c_void,
        arg2: *const super::c_void,
        arg3: size_t,
    ) -> super::c_int;
}
extern "C" {
    pub fn timingsafe_memcmp(
        arg1: *const super::c_void,
        arg2: *const super::c_void,
        arg3: size_t,
    ) -> super::c_int;
}
extern "C" {
    pub fn ffs(arg1: super::c_int) -> super::c_int;
}
extern "C" {
    pub fn index(arg1: *const super::c_char, arg2: super::c_int) -> *mut super::c_char;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut super::c_void,
        arg2: *const super::c_void,
        arg3: super::c_int,
        arg4: super::c_uint,
    ) -> *mut super::c_void;
}
extern "C" {
    pub fn rindex(arg1: *const super::c_char, arg2: super::c_int) -> *mut super::c_char;
}
extern "C" {
    pub fn stpcpy(arg1: *mut super::c_char, arg2: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut super::c_char,
        arg2: *const super::c_char,
        arg3: super::c_uint,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn strcasecmp(arg1: *const super::c_char, arg2: *const super::c_char) -> super::c_int;
}
extern "C" {
    pub fn strdup(arg1: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn _strdup_r(arg1: *mut _reent, arg2: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strndup(arg1: *const super::c_char, arg2: super::c_uint) -> *mut super::c_char;
}
extern "C" {
    pub fn _strndup_r(
        arg1: *mut _reent,
        arg2: *const super::c_char,
        arg3: size_t,
    ) -> *mut super::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(arg1: super::c_int, arg2: *mut super::c_char, arg3: size_t) -> super::c_int;
}
extern "C" {
    pub fn _strerror_r(
        arg1: *mut _reent,
        arg2: super::c_int,
        arg3: super::c_int,
        arg4: *mut super::c_int,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut super::c_char,
        arg2: *const super::c_char,
        arg3: super::c_uint,
    ) -> super::c_uint;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut super::c_char,
        arg2: *const super::c_char,
        arg3: super::c_uint,
    ) -> super::c_uint;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const super::c_char,
        arg2: *const super::c_char,
        arg3: super::c_uint,
    ) -> super::c_int;
}
extern "C" {
    pub fn strnlen(arg1: *const super::c_char, arg2: size_t) -> size_t;
}
extern "C" {
    pub fn strsep(arg1: *mut *mut super::c_char, arg2: *const super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strlwr(arg1: *mut super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strupr(arg1: *mut super::c_char) -> *mut super::c_char;
}
extern "C" {
    pub fn strsignal(__signo: super::c_int) -> *mut super::c_char;
}
#[repr(C)]
pub struct __dmath {
    pub d: __BindgenUnionField<f64>,
    pub i: __BindgenUnionField<[__ULong; 2usize]>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout___dmath() {
    assert_eq!(
        ::core::mem::size_of::<__dmath>(),
        8usize,
        concat!("Size of: ", stringify!(__dmath))
    );
    assert_eq!(
        ::core::mem::align_of::<__dmath>(),
        8usize,
        concat!("Alignment of ", stringify!(__dmath))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__dmath>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__dmath),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__dmath>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__dmath),
            "::",
            stringify!(i)
        )
    );
}
#[repr(C)]
pub struct __fmath {
    pub f: __BindgenUnionField<f32>,
    pub i: __BindgenUnionField<[__ULong; 1usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout___fmath() {
    assert_eq!(
        ::core::mem::size_of::<__fmath>(),
        4usize,
        concat!("Size of: ", stringify!(__fmath))
    );
    assert_eq!(
        ::core::mem::align_of::<__fmath>(),
        4usize,
        concat!("Alignment of ", stringify!(__fmath))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fmath>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fmath),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fmath>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fmath),
            "::",
            stringify!(i)
        )
    );
}
#[repr(C)]
pub struct __ldmath {
    pub ld: __BindgenUnionField<f64>,
    pub i: __BindgenUnionField<[__ULong; 4usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[test]
fn bindgen_test_layout___ldmath() {
    assert_eq!(
        ::core::mem::size_of::<__ldmath>(),
        16usize,
        concat!("Size of: ", stringify!(__ldmath))
    );
    assert_eq!(
        ::core::mem::align_of::<__ldmath>(),
        8usize,
        concat!("Alignment of ", stringify!(__ldmath))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__ldmath>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ldmath),
            "::",
            stringify!(ld)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__ldmath>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ldmath),
            "::",
            stringify!(i)
        )
    );
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut super::c_int) -> f64;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: super::c_int) -> f64;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> super::c_int;
}
extern "C" {
    pub fn finitef(arg1: f32) -> super::c_int;
}
extern "C" {
    pub fn finitel(arg1: f64) -> super::c_int;
}
extern "C" {
    pub fn isinff(arg1: f32) -> super::c_int;
}
extern "C" {
    pub fn isnanf(arg1: f32) -> super::c_int;
}
extern "C" {
    pub fn isinf(arg1: f64) -> super::c_int;
}
extern "C" {
    pub fn isnan(arg1: f64) -> super::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __isinff(x: f32) -> super::c_int;
}
extern "C" {
    pub fn __isinfd(x: f64) -> super::c_int;
}
extern "C" {
    pub fn __isnanf(x: f32) -> super::c_int;
}
extern "C" {
    pub fn __isnand(x: f64) -> super::c_int;
}
extern "C" {
    pub fn __fpclassifyf(x: f32) -> super::c_int;
}
extern "C" {
    pub fn __fpclassifyd(x: f64) -> super::c_int;
}
extern "C" {
    pub fn __signbitf(x: f32) -> super::c_int;
}
extern "C" {
    pub fn __signbitd(x: f64) -> super::c_int;
}
extern "C" {
    pub fn infinity() -> f64;
}
extern "C" {
    pub fn nan(arg1: *const super::c_char) -> f64;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> super::c_int;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: super::c_int) -> f64;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: super::c_long) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrint(arg1: f64) -> super::c_long;
}
extern "C" {
    pub fn llrint(arg1: f64) -> super::c_longlong;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn lround(arg1: f64) -> super::c_long;
}
extern "C" {
    pub fn llround(arg1: f64) -> super::c_longlong;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut super::c_int) -> f64;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut super::c_int) -> f32;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: super::c_int) -> f32;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: super::c_long) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> super::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> super::c_longlong;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> super::c_long;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> super::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut super::c_int) -> f32;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn infinityf() -> f32;
}
extern "C" {
    pub fn nanf(arg1: *const super::c_char) -> f32;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> super::c_int;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: super::c_int) -> f32;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut super::c_int) -> f64;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: super::c_int) -> f64;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const super::c_char) -> f64;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> super::c_int;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: super::c_int) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: super::c_long) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> super::c_long;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> super::c_longlong;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> super::c_long;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> super::c_longlong;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut super::c_int) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn dremf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn gamma_r(arg1: f64, arg2: *mut super::c_int) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, arg2: *mut super::c_int) -> f64;
}
extern "C" {
    pub fn gammaf_r(arg1: f32, arg2: *mut super::c_int) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, arg2: *mut super::c_int) -> f32;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: super::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: super::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: super::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: super::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __signgam() -> *mut super::c_int;
}
#[repr(C)]
pub struct exception {
    pub type_: super::c_int,
    pub name: *mut super::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
    pub err: super::c_int,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(
        ::core::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::core::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<exception>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<exception>())).arg1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<exception>())).arg2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<exception>())).retval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<exception>())).err as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(err)
        )
    );
}
extern "C" {
    pub fn matherr(e: *mut exception) -> super::c_int;
}
pub const __fdlibm_version___fdlibm_ieee: __fdlibm_version = -1;
pub const __fdlibm_version___fdlibm_svid: __fdlibm_version = 0;
pub const __fdlibm_version___fdlibm_xopen: __fdlibm_version = 1;
pub const __fdlibm_version___fdlibm_posix: __fdlibm_version = 2;
pub type __fdlibm_version = i32;
extern "C" {
    pub static mut __fdlib_version: __fdlibm_version;
}
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = super::c_schar;
pub type uint_fast8_t = super::c_uchar;
pub type int_fast16_t = super::c_short;
pub type uint_fast16_t = super::c_ushort;
pub type int_fast32_t = super::c_int;
pub type uint_fast32_t = super::c_uint;
pub type int_fast64_t = super::c_longlong;
pub type uint_fast64_t = super::c_ulonglong;
pub type intmax_t = super::c_longlong;
pub type uintmax_t = super::c_ulonglong;
#[repr(C)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::core::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(numer: intmax_t, denomer: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        arg1: *const super::c_char,
        arg2: *mut *mut super::c_char,
        arg3: super::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        arg1: *const super::c_char,
        arg2: *mut *mut super::c_char,
        arg3: super::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: super::c_int)
        -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: super::c_int,
    ) -> uintmax_t;
}
pub type prog_void = super::c_void;
pub type prog_char = super::c_char;
pub type prog_uchar = super::c_uchar;
pub type prog_int8_t = i8;
pub type prog_uint8_t = u8;
pub type prog_int16_t = i16;
pub type prog_uint16_t = u16;
pub type prog_int32_t = i32;
pub type prog_uint32_t = u32;
pub type prog_int64_t = i64;
pub type prog_uint64_t = u64;
extern "C" {
    pub fn eeprom_initialize();
}
extern "C" {
    pub fn eeprom_read_byte(addr: *const u8) -> u8;
}
extern "C" {
    pub fn eeprom_read_word(addr: *const u16) -> u16;
}
extern "C" {
    pub fn eeprom_read_dword(addr: *const u32) -> u32;
}
extern "C" {
    pub fn eeprom_read_block(buf: *mut super::c_void, addr: *const super::c_void, len: u32);
}
extern "C" {
    pub fn eeprom_write_byte(addr: *mut u8, value: u8);
}
extern "C" {
    pub fn eeprom_write_word(addr: *mut u16, value: u16);
}
extern "C" {
    pub fn eeprom_write_dword(addr: *mut u32, value: u32);
}
extern "C" {
    pub fn eeprom_write_block(buf: *const super::c_void, addr: *mut super::c_void, len: u32);
}
extern "C" {
    pub fn eeprom_is_ready() -> super::c_int;
}
extern "C" {
    pub fn ultoa(
        val: super::c_ulong,
        buf: *mut super::c_char,
        radix: super::c_int,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn ltoa(
        val: super::c_long,
        buf: *mut super::c_char,
        radix: super::c_int,
    ) -> *mut super::c_char;
}
extern "C" {
    pub fn dtostrf(
        val: f32,
        width: super::c_int,
        precision: super::c_uint,
        buf: *mut super::c_char,
    ) -> *mut super::c_char;
}
pub const IRQ_NUMBER_t_IRQ_DMA_CH0: IRQ_NUMBER_t = 0;
pub const IRQ_NUMBER_t_IRQ_DMA_CH1: IRQ_NUMBER_t = 1;
pub const IRQ_NUMBER_t_IRQ_DMA_CH2: IRQ_NUMBER_t = 2;
pub const IRQ_NUMBER_t_IRQ_DMA_CH3: IRQ_NUMBER_t = 3;
pub const IRQ_NUMBER_t_IRQ_DMA_CH4: IRQ_NUMBER_t = 4;
pub const IRQ_NUMBER_t_IRQ_DMA_CH5: IRQ_NUMBER_t = 5;
pub const IRQ_NUMBER_t_IRQ_DMA_CH6: IRQ_NUMBER_t = 6;
pub const IRQ_NUMBER_t_IRQ_DMA_CH7: IRQ_NUMBER_t = 7;
pub const IRQ_NUMBER_t_IRQ_DMA_CH8: IRQ_NUMBER_t = 8;
pub const IRQ_NUMBER_t_IRQ_DMA_CH9: IRQ_NUMBER_t = 9;
pub const IRQ_NUMBER_t_IRQ_DMA_CH10: IRQ_NUMBER_t = 10;
pub const IRQ_NUMBER_t_IRQ_DMA_CH11: IRQ_NUMBER_t = 11;
pub const IRQ_NUMBER_t_IRQ_DMA_CH12: IRQ_NUMBER_t = 12;
pub const IRQ_NUMBER_t_IRQ_DMA_CH13: IRQ_NUMBER_t = 13;
pub const IRQ_NUMBER_t_IRQ_DMA_CH14: IRQ_NUMBER_t = 14;
pub const IRQ_NUMBER_t_IRQ_DMA_CH15: IRQ_NUMBER_t = 15;
pub const IRQ_NUMBER_t_IRQ_DMA_ERROR: IRQ_NUMBER_t = 16;
pub const IRQ_NUMBER_t_IRQ_MCM: IRQ_NUMBER_t = 17;
pub const IRQ_NUMBER_t_IRQ_FTFL_COMPLETE: IRQ_NUMBER_t = 18;
pub const IRQ_NUMBER_t_IRQ_FTFL_COLLISION: IRQ_NUMBER_t = 19;
pub const IRQ_NUMBER_t_IRQ_LOW_VOLTAGE: IRQ_NUMBER_t = 20;
pub const IRQ_NUMBER_t_IRQ_LLWU: IRQ_NUMBER_t = 21;
pub const IRQ_NUMBER_t_IRQ_WDOG: IRQ_NUMBER_t = 22;
pub const IRQ_NUMBER_t_IRQ_RNG: IRQ_NUMBER_t = 23;
pub const IRQ_NUMBER_t_IRQ_I2C0: IRQ_NUMBER_t = 24;
pub const IRQ_NUMBER_t_IRQ_I2C1: IRQ_NUMBER_t = 25;
pub const IRQ_NUMBER_t_IRQ_SPI0: IRQ_NUMBER_t = 26;
pub const IRQ_NUMBER_t_IRQ_SPI1: IRQ_NUMBER_t = 27;
pub const IRQ_NUMBER_t_IRQ_I2S0_TX: IRQ_NUMBER_t = 28;
pub const IRQ_NUMBER_t_IRQ_I2S0_RX: IRQ_NUMBER_t = 29;
pub const IRQ_NUMBER_t_IRQ_UART0_STATUS: IRQ_NUMBER_t = 31;
pub const IRQ_NUMBER_t_IRQ_UART0_ERROR: IRQ_NUMBER_t = 32;
pub const IRQ_NUMBER_t_IRQ_UART1_STATUS: IRQ_NUMBER_t = 33;
pub const IRQ_NUMBER_t_IRQ_UART1_ERROR: IRQ_NUMBER_t = 34;
pub const IRQ_NUMBER_t_IRQ_UART2_STATUS: IRQ_NUMBER_t = 35;
pub const IRQ_NUMBER_t_IRQ_UART2_ERROR: IRQ_NUMBER_t = 36;
pub const IRQ_NUMBER_t_IRQ_UART3_STATUS: IRQ_NUMBER_t = 37;
pub const IRQ_NUMBER_t_IRQ_UART3_ERROR: IRQ_NUMBER_t = 38;
pub const IRQ_NUMBER_t_IRQ_ADC0: IRQ_NUMBER_t = 39;
pub const IRQ_NUMBER_t_IRQ_CMP0: IRQ_NUMBER_t = 40;
pub const IRQ_NUMBER_t_IRQ_CMP1: IRQ_NUMBER_t = 41;
pub const IRQ_NUMBER_t_IRQ_FTM0: IRQ_NUMBER_t = 42;
pub const IRQ_NUMBER_t_IRQ_FTM1: IRQ_NUMBER_t = 43;
pub const IRQ_NUMBER_t_IRQ_FTM2: IRQ_NUMBER_t = 44;
pub const IRQ_NUMBER_t_IRQ_CMT: IRQ_NUMBER_t = 45;
pub const IRQ_NUMBER_t_IRQ_RTC_ALARM: IRQ_NUMBER_t = 46;
pub const IRQ_NUMBER_t_IRQ_RTC_SECOND: IRQ_NUMBER_t = 47;
pub const IRQ_NUMBER_t_IRQ_PIT_CH0: IRQ_NUMBER_t = 48;
pub const IRQ_NUMBER_t_IRQ_PIT_CH1: IRQ_NUMBER_t = 49;
pub const IRQ_NUMBER_t_IRQ_PIT_CH2: IRQ_NUMBER_t = 50;
pub const IRQ_NUMBER_t_IRQ_PIT_CH3: IRQ_NUMBER_t = 51;
pub const IRQ_NUMBER_t_IRQ_PDB: IRQ_NUMBER_t = 52;
pub const IRQ_NUMBER_t_IRQ_USBOTG: IRQ_NUMBER_t = 53;
pub const IRQ_NUMBER_t_IRQ_USBDCD: IRQ_NUMBER_t = 54;
pub const IRQ_NUMBER_t_IRQ_DAC0: IRQ_NUMBER_t = 56;
pub const IRQ_NUMBER_t_IRQ_MCG: IRQ_NUMBER_t = 57;
pub const IRQ_NUMBER_t_IRQ_LPTMR: IRQ_NUMBER_t = 58;
pub const IRQ_NUMBER_t_IRQ_PORTA: IRQ_NUMBER_t = 59;
pub const IRQ_NUMBER_t_IRQ_PORTB: IRQ_NUMBER_t = 60;
pub const IRQ_NUMBER_t_IRQ_PORTC: IRQ_NUMBER_t = 61;
pub const IRQ_NUMBER_t_IRQ_PORTD: IRQ_NUMBER_t = 62;
pub const IRQ_NUMBER_t_IRQ_PORTE: IRQ_NUMBER_t = 63;
pub const IRQ_NUMBER_t_IRQ_SOFTWARE: IRQ_NUMBER_t = 64;
pub const IRQ_NUMBER_t_IRQ_SPI2: IRQ_NUMBER_t = 65;
pub const IRQ_NUMBER_t_IRQ_UART4_STATUS: IRQ_NUMBER_t = 66;
pub const IRQ_NUMBER_t_IRQ_UART4_ERROR: IRQ_NUMBER_t = 67;
pub const IRQ_NUMBER_t_IRQ_CMP2: IRQ_NUMBER_t = 70;
pub const IRQ_NUMBER_t_IRQ_FTM3: IRQ_NUMBER_t = 71;
pub const IRQ_NUMBER_t_IRQ_DAC1: IRQ_NUMBER_t = 72;
pub const IRQ_NUMBER_t_IRQ_ADC1: IRQ_NUMBER_t = 73;
pub const IRQ_NUMBER_t_IRQ_I2C2: IRQ_NUMBER_t = 74;
pub const IRQ_NUMBER_t_IRQ_CAN0_MESSAGE: IRQ_NUMBER_t = 75;
pub const IRQ_NUMBER_t_IRQ_CAN0_BUS_OFF: IRQ_NUMBER_t = 76;
pub const IRQ_NUMBER_t_IRQ_CAN0_ERROR: IRQ_NUMBER_t = 77;
pub const IRQ_NUMBER_t_IRQ_CAN0_TX_WARN: IRQ_NUMBER_t = 78;
pub const IRQ_NUMBER_t_IRQ_CAN0_RX_WARN: IRQ_NUMBER_t = 79;
pub const IRQ_NUMBER_t_IRQ_CAN0_WAKEUP: IRQ_NUMBER_t = 80;
pub const IRQ_NUMBER_t_IRQ_SDHC: IRQ_NUMBER_t = 81;
pub const IRQ_NUMBER_t_IRQ_ENET_TIMER: IRQ_NUMBER_t = 82;
pub const IRQ_NUMBER_t_IRQ_ENET_TX: IRQ_NUMBER_t = 83;
pub const IRQ_NUMBER_t_IRQ_ENET_RX: IRQ_NUMBER_t = 84;
pub const IRQ_NUMBER_t_IRQ_ENET_ERROR: IRQ_NUMBER_t = 85;
pub const IRQ_NUMBER_t_IRQ_LPUART0: IRQ_NUMBER_t = 86;
pub const IRQ_NUMBER_t_IRQ_TSI: IRQ_NUMBER_t = 87;
pub const IRQ_NUMBER_t_IRQ_TPM1: IRQ_NUMBER_t = 88;
pub const IRQ_NUMBER_t_IRQ_TPM2: IRQ_NUMBER_t = 89;
pub const IRQ_NUMBER_t_IRQ_USBHS_PHY: IRQ_NUMBER_t = 90;
pub const IRQ_NUMBER_t_IRQ_I2C3: IRQ_NUMBER_t = 91;
pub const IRQ_NUMBER_t_IRQ_CMP3: IRQ_NUMBER_t = 92;
pub const IRQ_NUMBER_t_IRQ_USBHS: IRQ_NUMBER_t = 93;
pub const IRQ_NUMBER_t_IRQ_CAN1_MESSAGE: IRQ_NUMBER_t = 94;
pub const IRQ_NUMBER_t_IRQ_CAN1_BUS_OFF: IRQ_NUMBER_t = 95;
pub const IRQ_NUMBER_t_IRQ_CAN1_ERROR: IRQ_NUMBER_t = 96;
pub const IRQ_NUMBER_t_IRQ_CAN1_TX_WARN: IRQ_NUMBER_t = 97;
pub const IRQ_NUMBER_t_IRQ_CAN1_RX_WARN: IRQ_NUMBER_t = 98;
pub const IRQ_NUMBER_t_IRQ_CAN1_WAKEUP: IRQ_NUMBER_t = 99;
pub type IRQ_NUMBER_t = u32;
#[repr(C)]
pub struct KINETIS_MCG_t {
    pub C1: u8,
    pub C2: u8,
    pub C3: u8,
    pub C4: u8,
    pub C5: u8,
    pub C6: u8,
    pub S: u8,
    pub unused1: u8,
    pub SC: u8,
    pub unused2: u8,
    pub ATCVH: u8,
    pub ATCVL: u8,
    pub C7: u8,
    pub C8: u8,
    pub C9: u8,
    pub unused3: u8,
    pub C11: u8,
    pub C12: u8,
    pub S2: u8,
    pub T3: u8,
}
#[test]
fn bindgen_test_layout_KINETIS_MCG_t() {
    assert_eq!(
        ::core::mem::size_of::<KINETIS_MCG_t>(),
        20usize,
        concat!("Size of: ", stringify!(KINETIS_MCG_t))
    );
    assert_eq!(
        ::core::mem::align_of::<KINETIS_MCG_t>(),
        1usize,
        concat!("Alignment of ", stringify!(KINETIS_MCG_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C2 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C3 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C4 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C5 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C6 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).S as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).unused1 as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(unused1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).SC as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(SC)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).unused2 as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).ATCVH as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(ATCVH)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).ATCVL as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(ATCVL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C7 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C8 as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C8)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C9 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).unused3 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(unused3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C11 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C11)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).C12 as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(C12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).S2 as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(S2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_MCG_t>())).T3 as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_MCG_t),
            "::",
            stringify!(T3)
        )
    );
}
#[repr(C)]
pub struct KINETISK_PIT_CHANNEL_t {
    pub LDVAL: u32,
    pub CVAL: u32,
    pub TCTRL: u32,
    pub TFLG: u32,
}
#[test]
fn bindgen_test_layout_KINETISK_PIT_CHANNEL_t() {
    assert_eq!(
        ::core::mem::size_of::<KINETISK_PIT_CHANNEL_t>(),
        16usize,
        concat!("Size of: ", stringify!(KINETISK_PIT_CHANNEL_t))
    );
    assert_eq!(
        ::core::mem::align_of::<KINETISK_PIT_CHANNEL_t>(),
        4usize,
        concat!("Alignment of ", stringify!(KINETISK_PIT_CHANNEL_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_PIT_CHANNEL_t>())).LDVAL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_PIT_CHANNEL_t),
            "::",
            stringify!(LDVAL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_PIT_CHANNEL_t>())).CVAL as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_PIT_CHANNEL_t),
            "::",
            stringify!(CVAL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_PIT_CHANNEL_t>())).TCTRL as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_PIT_CHANNEL_t),
            "::",
            stringify!(TCTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_PIT_CHANNEL_t>())).TFLG as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_PIT_CHANNEL_t),
            "::",
            stringify!(TFLG)
        )
    );
}
#[repr(C)]
pub struct KINETISK_SPI_t {
    pub MCR: u32,
    pub unused1: u32,
    pub TCR: u32,
    pub CTAR0: u32,
    pub CTAR1: u32,
    pub CTAR2: u32,
    pub CTAR3: u32,
    pub CTAR4: u32,
    pub CTAR5: u32,
    pub CTAR6: u32,
    pub CTAR7: u32,
    pub SR: u32,
    pub RSER: u32,
    pub PUSHR: u32,
    pub POPR: u32,
    pub TXFR: [u32; 16usize],
    pub RXFR: [u32; 16usize],
}
#[test]
fn bindgen_test_layout_KINETISK_SPI_t() {
    assert_eq!(
        ::core::mem::size_of::<KINETISK_SPI_t>(),
        188usize,
        concat!("Size of: ", stringify!(KINETISK_SPI_t))
    );
    assert_eq!(
        ::core::mem::align_of::<KINETISK_SPI_t>(),
        4usize,
        concat!("Alignment of ", stringify!(KINETISK_SPI_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).MCR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).unused1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(unused1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).TCR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).CTAR0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(CTAR0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).CTAR1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(CTAR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).CTAR2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(CTAR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).CTAR3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(CTAR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).CTAR4 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(CTAR4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).CTAR5 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(CTAR5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).CTAR6 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(CTAR6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).CTAR7 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(CTAR7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).SR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).RSER as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(RSER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).PUSHR as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(PUSHR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).POPR as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(POPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).TXFR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(TXFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_SPI_t>())).RXFR as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_SPI_t),
            "::",
            stringify!(RXFR)
        )
    );
}
#[repr(C)]
pub struct KINETIS_I2C_t {
    pub A1: u8,
    pub F: u8,
    pub C1: u8,
    pub S: u8,
    pub D: u8,
    pub C2: u8,
    pub FLT: u8,
    pub RA: u8,
    pub SMB: u8,
    pub A2: u8,
    pub SLTH: u8,
    pub SLTL: u8,
}
#[test]
fn bindgen_test_layout_KINETIS_I2C_t() {
    assert_eq!(
        ::core::mem::size_of::<KINETIS_I2C_t>(),
        12usize,
        concat!("Size of: ", stringify!(KINETIS_I2C_t))
    );
    assert_eq!(
        ::core::mem::align_of::<KINETIS_I2C_t>(),
        1usize,
        concat!("Alignment of ", stringify!(KINETIS_I2C_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).A1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(A1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).F as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(F)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).C1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(C1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).S as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).D as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(D)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).C2 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(C2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).FLT as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(FLT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).RA as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(RA)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).SMB as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(SMB)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).A2 as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(A2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).SLTH as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(SLTH)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETIS_I2C_t>())).SLTL as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETIS_I2C_t),
            "::",
            stringify!(SLTL)
        )
    );
}
#[repr(C, packed)]
pub struct KINETISK_UART_t {
    pub BDH: u8,
    pub BDL: u8,
    pub C1: u8,
    pub C2: u8,
    pub S1: u8,
    pub S2: u8,
    pub C3: u8,
    pub D: u8,
    pub MA1: u8,
    pub MA2: u8,
    pub C4: u8,
    pub C5: u8,
    pub ED: u8,
    pub MODEM: u8,
    pub IR: u8,
    pub unused1: u8,
    pub PFIFO: u8,
    pub CFIFO: u8,
    pub SFIFO: u8,
    pub TWFIFO: u8,
    pub TCFIFO: u8,
    pub RWFIFO: u8,
    pub RCFIFO: u8,
    pub unused2: u8,
    pub C7816: u8,
    pub IE7816: u8,
    pub IS7816: u8,
    pub __bindgen_anon_1: KINETISK_UART_t__bindgen_ty_1,
    pub WN7816: u8,
    pub WF7816: u8,
    pub ET7816: u8,
    pub TL7816: u8,
    pub unused3: u8,
    pub C6: u8,
    pub PCTH: u8,
    pub PCTL: u8,
    pub B1T: u8,
    pub SDTH: u8,
    pub SDTL: u8,
    pub PRE: u8,
    pub TPL: u8,
    pub IE: u8,
    pub WB: u8,
    pub S3: u8,
    pub S4: u8,
    pub RPL: u8,
    pub RPREL: u8,
    pub CPW: u8,
    pub RIDT: u8,
    pub TIDT: u8,
}
#[repr(C)]
pub struct KINETISK_UART_t__bindgen_ty_1 {
    pub WP7816T0: __BindgenUnionField<u8>,
    pub WP7816T1: __BindgenUnionField<u8>,
    pub bindgen_union_field: u8,
}
#[test]
fn bindgen_test_layout_KINETISK_UART_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<KINETISK_UART_t__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(KINETISK_UART_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<KINETISK_UART_t__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(KINETISK_UART_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<KINETISK_UART_t__bindgen_ty_1>())).WP7816T0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t__bindgen_ty_1),
            "::",
            stringify!(WP7816T0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<KINETISK_UART_t__bindgen_ty_1>())).WP7816T1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t__bindgen_ty_1),
            "::",
            stringify!(WP7816T1)
        )
    );
}
#[test]
fn bindgen_test_layout_KINETISK_UART_t() {
    assert_eq!(
        ::core::mem::size_of::<KINETISK_UART_t>(),
        50usize,
        concat!("Size of: ", stringify!(KINETISK_UART_t))
    );
    assert_eq!(
        ::core::mem::align_of::<KINETISK_UART_t>(),
        1usize,
        concat!("Alignment of ", stringify!(KINETISK_UART_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).BDH as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(BDH)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).BDL as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(BDL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).C1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(C1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).C2 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(C2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).S1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(S1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).S2 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(S2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).C3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(C3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).D as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(D)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).MA1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(MA1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).MA2 as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(MA2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).C4 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(C4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).C5 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(C5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).ED as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(ED)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).MODEM as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(MODEM)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).IR as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(IR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).unused1 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(unused1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).PFIFO as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(PFIFO)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).CFIFO as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(CFIFO)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).SFIFO as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(SFIFO)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).TWFIFO as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(TWFIFO)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).TCFIFO as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(TCFIFO)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).RWFIFO as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(RWFIFO)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).RCFIFO as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(RCFIFO)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).unused2 as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).C7816 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(C7816)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).IE7816 as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(IE7816)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).IS7816 as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(IS7816)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).WN7816 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(WN7816)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).WF7816 as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(WF7816)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).ET7816 as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(ET7816)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).TL7816 as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(TL7816)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).unused3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(unused3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).C6 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(C6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).PCTH as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(PCTH)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).PCTL as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(PCTL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).B1T as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(B1T)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).SDTH as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(SDTH)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).SDTL as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(SDTL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).PRE as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(PRE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).TPL as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(TPL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).IE as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(IE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).WB as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(WB)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).S3 as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(S3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).S4 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(S4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).RPL as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(RPL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).RPREL as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(RPREL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).CPW as *const _ as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(CPW)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).RIDT as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(RIDT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_UART_t>())).TIDT as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_UART_t),
            "::",
            stringify!(TIDT)
        )
    );
}
#[doc = ""]
#[repr(C, packed)]
pub struct KINETISK_LPUART_t {
    pub BAUD: u32,
    pub STAT: u32,
    pub CTRL: u32,
    pub DATA: u32,
    pub MATCH: u32,
    pub MODIR: u32,
}
#[test]
fn bindgen_test_layout_KINETISK_LPUART_t() {
    assert_eq!(
        ::core::mem::size_of::<KINETISK_LPUART_t>(),
        24usize,
        concat!("Size of: ", stringify!(KINETISK_LPUART_t))
    );
    assert_eq!(
        ::core::mem::align_of::<KINETISK_LPUART_t>(),
        1usize,
        concat!("Alignment of ", stringify!(KINETISK_LPUART_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_LPUART_t>())).BAUD as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_LPUART_t),
            "::",
            stringify!(BAUD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_LPUART_t>())).STAT as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_LPUART_t),
            "::",
            stringify!(STAT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_LPUART_t>())).CTRL as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_LPUART_t),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_LPUART_t>())).DATA as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_LPUART_t),
            "::",
            stringify!(DATA)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_LPUART_t>())).MATCH as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_LPUART_t),
            "::",
            stringify!(MATCH)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<KINETISK_LPUART_t>())).MODIR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(KINETISK_LPUART_t),
            "::",
            stringify!(MODIR)
        )
    );
}
extern "C" {
    pub fn nvic_execution_priority() -> super::c_int;
}
extern "C" {
    pub fn kinetis_hsrun_disable() -> super::c_int;
}
extern "C" {
    pub fn kinetis_hsrun_enable() -> super::c_int;
}
extern "C" {
    pub fn nmi_isr();
}
extern "C" {
    pub fn hard_fault_isr();
}
extern "C" {
    pub fn memmanage_fault_isr();
}
extern "C" {
    pub fn bus_fault_isr();
}
extern "C" {
    pub fn usage_fault_isr();
}
extern "C" {
    pub fn svcall_isr();
}
extern "C" {
    pub fn debugmonitor_isr();
}
extern "C" {
    pub fn pendablesrvreq_isr();
}
extern "C" {
    pub fn systick_isr();
}
extern "C" {
    pub fn dma_ch0_isr();
}
extern "C" {
    pub fn dma_ch1_isr();
}
extern "C" {
    pub fn dma_ch2_isr();
}
extern "C" {
    pub fn dma_ch3_isr();
}
extern "C" {
    pub fn dma_ch4_isr();
}
extern "C" {
    pub fn dma_ch5_isr();
}
extern "C" {
    pub fn dma_ch6_isr();
}
extern "C" {
    pub fn dma_ch7_isr();
}
extern "C" {
    pub fn dma_ch8_isr();
}
extern "C" {
    pub fn dma_ch9_isr();
}
extern "C" {
    pub fn dma_ch10_isr();
}
extern "C" {
    pub fn dma_ch11_isr();
}
extern "C" {
    pub fn dma_ch12_isr();
}
extern "C" {
    pub fn dma_ch13_isr();
}
extern "C" {
    pub fn dma_ch14_isr();
}
extern "C" {
    pub fn dma_ch15_isr();
}
extern "C" {
    pub fn dma_error_isr();
}
extern "C" {
    pub fn mcm_isr();
}
extern "C" {
    pub fn randnum_isr();
}
extern "C" {
    pub fn flash_cmd_isr();
}
extern "C" {
    pub fn flash_error_isr();
}
extern "C" {
    pub fn low_voltage_isr();
}
extern "C" {
    pub fn wakeup_isr();
}
extern "C" {
    pub fn watchdog_isr();
}
extern "C" {
    pub fn i2c0_isr();
}
extern "C" {
    pub fn i2c1_isr();
}
extern "C" {
    pub fn i2c2_isr();
}
extern "C" {
    pub fn i2c3_isr();
}
extern "C" {
    pub fn spi0_isr();
}
extern "C" {
    pub fn spi1_isr();
}
extern "C" {
    pub fn spi2_isr();
}
extern "C" {
    pub fn sdhc_isr();
}
extern "C" {
    pub fn enet_timer_isr();
}
extern "C" {
    pub fn enet_tx_isr();
}
extern "C" {
    pub fn enet_rx_isr();
}
extern "C" {
    pub fn enet_error_isr();
}
extern "C" {
    pub fn can0_message_isr();
}
extern "C" {
    pub fn can0_bus_off_isr();
}
extern "C" {
    pub fn can0_error_isr();
}
extern "C" {
    pub fn can0_tx_warn_isr();
}
extern "C" {
    pub fn can0_rx_warn_isr();
}
extern "C" {
    pub fn can0_wakeup_isr();
}
extern "C" {
    pub fn can1_message_isr();
}
extern "C" {
    pub fn can1_bus_off_isr();
}
extern "C" {
    pub fn can1_error_isr();
}
extern "C" {
    pub fn can1_tx_warn_isr();
}
extern "C" {
    pub fn can1_rx_warn_isr();
}
extern "C" {
    pub fn can1_wakeup_isr();
}
extern "C" {
    pub fn i2s0_tx_isr();
}
extern "C" {
    pub fn i2s0_rx_isr();
}
extern "C" {
    pub fn i2s0_isr();
}
extern "C" {
    pub fn uart0_lon_isr();
}
extern "C" {
    pub fn uart0_status_isr();
}
extern "C" {
    pub fn uart0_error_isr();
}
extern "C" {
    pub fn uart1_status_isr();
}
extern "C" {
    pub fn uart1_error_isr();
}
extern "C" {
    pub fn uart2_status_isr();
}
extern "C" {
    pub fn uart2_error_isr();
}
extern "C" {
    pub fn uart3_status_isr();
}
extern "C" {
    pub fn uart3_error_isr();
}
extern "C" {
    pub fn uart4_status_isr();
}
extern "C" {
    pub fn uart4_error_isr();
}
extern "C" {
    pub fn uart5_status_isr();
}
extern "C" {
    pub fn uart5_error_isr();
}
extern "C" {
    pub fn lpuart0_status_isr();
}
extern "C" {
    pub fn adc0_isr();
}
extern "C" {
    pub fn adc1_isr();
}
extern "C" {
    pub fn cmp0_isr();
}
extern "C" {
    pub fn cmp1_isr();
}
extern "C" {
    pub fn cmp2_isr();
}
extern "C" {
    pub fn cmp3_isr();
}
extern "C" {
    pub fn ftm0_isr();
}
extern "C" {
    pub fn ftm1_isr();
}
extern "C" {
    pub fn ftm2_isr();
}
extern "C" {
    pub fn ftm3_isr();
}
extern "C" {
    pub fn tpm0_isr();
}
extern "C" {
    pub fn tpm1_isr();
}
extern "C" {
    pub fn tpm2_isr();
}
extern "C" {
    pub fn cmt_isr();
}
extern "C" {
    pub fn rtc_alarm_isr();
}
extern "C" {
    pub fn rtc_seconds_isr();
}
extern "C" {
    pub fn pit0_isr();
}
extern "C" {
    pub fn pit1_isr();
}
extern "C" {
    pub fn pit2_isr();
}
extern "C" {
    pub fn pit3_isr();
}
extern "C" {
    pub fn pit_isr();
}
extern "C" {
    pub fn pdb_isr();
}
extern "C" {
    pub fn usb_isr();
}
extern "C" {
    pub fn usb_charge_isr();
}
extern "C" {
    pub fn usbhs_isr();
}
extern "C" {
    pub fn usbhs_phy_isr();
}
extern "C" {
    pub fn dac0_isr();
}
extern "C" {
    pub fn dac1_isr();
}
extern "C" {
    pub fn tsi0_isr();
}
extern "C" {
    pub fn mcg_isr();
}
extern "C" {
    pub fn lptmr_isr();
}
extern "C" {
    pub fn porta_isr();
}
extern "C" {
    pub fn portb_isr();
}
extern "C" {
    pub fn portc_isr();
}
extern "C" {
    pub fn portd_isr();
}
extern "C" {
    pub fn porte_isr();
}
extern "C" {
    pub fn portcd_isr();
}
extern "C" {
    pub fn software_isr();
}
extern "C" {
    pub static mut _VectorsRam: [::core::option::Option<unsafe extern "C" fn()>; 116usize];
}
extern "C" {
    pub static _VectorsFlash: [::core::option::Option<unsafe extern "C" fn()>; 116usize];
}
pub const A0: u8 = 14;
pub const A1: u8 = 15;
pub const A2: u8 = 16;
pub const A3: u8 = 17;
pub const A4: u8 = 18;
pub const A5: u8 = 19;
pub const A6: u8 = 20;
pub const A7: u8 = 21;
pub const A8: u8 = 22;
pub const A9: u8 = 23;
pub const A10: u8 = 64;
pub const A11: u8 = 65;
pub const A12: u8 = 31;
pub const A13: u8 = 32;
pub const A14: u8 = 33;
pub const A15: u8 = 34;
pub const A16: u8 = 35;
pub const A17: u8 = 36;
pub const A18: u8 = 37;
pub const A19: u8 = 38;
pub const A20: u8 = 39;
pub const A21: u8 = 66;
pub const A22: u8 = 67;
pub const A23: u8 = 49;
pub const A24: u8 = 50;
pub const A25: u8 = 68;
pub const A26: u8 = 69;
pub const SS: u8 = 10;
pub const MOSI: u8 = 11;
pub const MISO: u8 = 12;
pub const SCK: u8 = 13;
pub const SDA: u8 = 18;
pub const SCL: u8 = 19;
#[repr(C)]
pub struct digital_pin_bitband_and_config_table_struct {
    pub reg: *mut u32,
    pub config: *mut u32,
}
#[test]
fn bindgen_test_layout_digital_pin_bitband_and_config_table_struct() {
    assert_eq!(
        ::core::mem::size_of::<digital_pin_bitband_and_config_table_struct>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(digital_pin_bitband_and_config_table_struct)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<digital_pin_bitband_and_config_table_struct>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(digital_pin_bitband_and_config_table_struct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<digital_pin_bitband_and_config_table_struct>())).reg as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(digital_pin_bitband_and_config_table_struct),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<digital_pin_bitband_and_config_table_struct>())).config
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(digital_pin_bitband_and_config_table_struct),
            "::",
            stringify!(config)
        )
    );
}
extern "C" {
    pub static mut digital_pin_to_info_PGM: [digital_pin_bitband_and_config_table_struct; 0usize];
}
extern "C" {
    pub fn digitalWrite(pin: u8, val: u8);
}
extern "C" {
    pub fn digitalRead(pin: u8) -> u8;
}
extern "C" {
    pub fn pinMode(pin: u8, mode: u8);
}
extern "C" {
    pub fn init_pins();
}
extern "C" {
    pub fn analogWrite(pin: u8, val: super::c_int);
}
extern "C" {
    pub fn analogWriteRes(bits: u32) -> u32;
}
extern "C" {
    pub fn analogWriteFrequency(pin: u8, frequency: f32);
}
extern "C" {
    pub fn analogWriteDAC0(val: super::c_int);
}
extern "C" {
    pub fn analogWriteDAC1(val: super::c_int);
}
extern "C" {
    pub fn attachInterruptVector(
        irq: IRQ_NUMBER_t,
        function: ::core::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn attachInterrupt(
        pin: u8,
        function: ::core::option::Option<unsafe extern "C" fn()>,
        mode: super::c_int,
    );
}
extern "C" {
    pub fn detachInterrupt(pin: u8);
}
extern "C" {
    pub fn _init_Teensyduino_internal_();
}
extern "C" {
    pub fn analogRead(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn analogReference(type_: u8);
}
extern "C" {
    pub fn analogReadRes(bits: super::c_uint);
}
extern "C" {
    pub fn analogReadAveraging(num: super::c_uint);
}
extern "C" {
    pub fn analog_init();
}
extern "C" {
    pub fn touchRead(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn _shiftOut(dataPin: u8, clockPin: u8, bitOrder: u8, value: u8);
}
extern "C" {
    pub fn shiftOut_lsbFirst(dataPin: u8, clockPin: u8, value: u8);
}
extern "C" {
    pub fn shiftOut_msbFirst(dataPin: u8, clockPin: u8, value: u8);
}
extern "C" {
    pub fn _shiftIn(dataPin: u8, clockPin: u8, bitOrder: u8) -> u8;
}
extern "C" {
    pub fn shiftIn_lsbFirst(dataPin: u8, clockPin: u8) -> u8;
}
extern "C" {
    pub fn shiftIn_msbFirst(dataPin: u8, clockPin: u8) -> u8;
}
extern "C" {
    pub fn _reboot_Teensyduino_();
}
extern "C" {
    pub fn _restart_Teensyduino_();
}
extern "C" {
    #[link_name = "\u{1}yield"]
    pub fn yield_();
}
extern "C" {
    pub fn delay(msec: u32);
}
extern "C" {
    pub static mut systick_millis_count: u32;
}
extern "C" {
    pub fn micros() -> u32;
}
extern "C" {
    pub fn rtc_get() -> super::c_ulong;
}
extern "C" {
    pub fn rtc_set(t: super::c_ulong);
}
extern "C" {
    pub fn rtc_compensate(adjust: super::c_int);
}
extern "C" {
    pub fn exp10(x: f64) -> f64;
}
extern "C" {
    pub fn exp10f(x: f32) -> f32;
}
extern "C" {
    pub fn exp10l(x: f64) -> f64;
}
extern "C" {
    pub fn pow10(x: f64) -> f64;
}
extern "C" {
    pub fn pow10f(x: f32) -> f32;
}
extern "C" {
    pub fn pow10l(x: f64) -> f64;
}
pub type word = super::c_uint;
pub type byte = u8;
extern "C" {
    pub fn pulseIn(pin: u8, state: u8, timeout: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}loop"]
    pub fn loop_();
}
pub type boolean = u8;
extern "C" {
    pub fn serial_begin(divisor: u32);
}
extern "C" {
    pub fn serial_format(format: u32);
}
extern "C" {
    pub fn serial_end();
}
extern "C" {
    pub fn serial_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial_set_rx(pin: u8);
}
extern "C" {
    pub fn serial_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial_set_rts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial_set_cts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial_putchar(c: u32);
}
extern "C" {
    pub fn serial_write(buf: *const super::c_void, count: super::c_uint);
}
extern "C" {
    pub fn serial_flush();
}
extern "C" {
    pub fn serial_write_buffer_free() -> super::c_int;
}
extern "C" {
    pub fn serial_available() -> super::c_int;
}
extern "C" {
    pub fn serial_getchar() -> super::c_int;
}
extern "C" {
    pub fn serial_peek() -> super::c_int;
}
extern "C" {
    pub fn serial_clear();
}
extern "C" {
    pub fn serial_print(p: *const super::c_char);
}
extern "C" {
    pub fn serial_phex(n: u32);
}
extern "C" {
    pub fn serial_phex16(n: u32);
}
extern "C" {
    pub fn serial_phex32(n: u32);
}
extern "C" {
    pub fn serial2_begin(divisor: u32);
}
extern "C" {
    pub fn serial2_format(format: u32);
}
extern "C" {
    pub fn serial2_end();
}
extern "C" {
    pub fn serial2_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial2_set_rx(pin: u8);
}
extern "C" {
    pub fn serial2_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial2_set_rts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial2_set_cts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial2_putchar(c: u32);
}
extern "C" {
    pub fn serial2_write(buf: *const super::c_void, count: super::c_uint);
}
extern "C" {
    pub fn serial2_flush();
}
extern "C" {
    pub fn serial2_write_buffer_free() -> super::c_int;
}
extern "C" {
    pub fn serial2_available() -> super::c_int;
}
extern "C" {
    pub fn serial2_getchar() -> super::c_int;
}
extern "C" {
    pub fn serial2_peek() -> super::c_int;
}
extern "C" {
    pub fn serial2_clear();
}
extern "C" {
    pub fn serial3_begin(divisor: u32);
}
extern "C" {
    pub fn serial3_format(format: u32);
}
extern "C" {
    pub fn serial3_end();
}
extern "C" {
    pub fn serial3_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial3_set_rx(pin: u8);
}
extern "C" {
    pub fn serial3_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial3_set_rts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial3_set_cts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial3_putchar(c: u32);
}
extern "C" {
    pub fn serial3_write(buf: *const super::c_void, count: super::c_uint);
}
extern "C" {
    pub fn serial3_flush();
}
extern "C" {
    pub fn serial3_write_buffer_free() -> super::c_int;
}
extern "C" {
    pub fn serial3_available() -> super::c_int;
}
extern "C" {
    pub fn serial3_getchar() -> super::c_int;
}
extern "C" {
    pub fn serial3_peek() -> super::c_int;
}
extern "C" {
    pub fn serial3_clear();
}
extern "C" {
    pub fn serial4_begin(divisor: u32);
}
extern "C" {
    pub fn serial4_format(format: u32);
}
extern "C" {
    pub fn serial4_end();
}
extern "C" {
    pub fn serial4_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial4_set_rx(pin: u8);
}
extern "C" {
    pub fn serial4_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial4_set_rts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial4_set_cts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial4_putchar(c: u32);
}
extern "C" {
    pub fn serial4_write(buf: *const super::c_void, count: super::c_uint);
}
extern "C" {
    pub fn serial4_flush();
}
extern "C" {
    pub fn serial4_write_buffer_free() -> super::c_int;
}
extern "C" {
    pub fn serial4_available() -> super::c_int;
}
extern "C" {
    pub fn serial4_getchar() -> super::c_int;
}
extern "C" {
    pub fn serial4_peek() -> super::c_int;
}
extern "C" {
    pub fn serial4_clear();
}
extern "C" {
    pub fn serial5_begin(divisor: u32);
}
extern "C" {
    pub fn serial5_format(format: u32);
}
extern "C" {
    pub fn serial5_end();
}
extern "C" {
    pub fn serial5_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial5_set_rx(pin: u8);
}
extern "C" {
    pub fn serial5_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial5_set_rts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial5_set_cts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial5_putchar(c: u32);
}
extern "C" {
    pub fn serial5_write(buf: *const super::c_void, count: super::c_uint);
}
extern "C" {
    pub fn serial5_flush();
}
extern "C" {
    pub fn serial5_write_buffer_free() -> super::c_int;
}
extern "C" {
    pub fn serial5_available() -> super::c_int;
}
extern "C" {
    pub fn serial5_getchar() -> super::c_int;
}
extern "C" {
    pub fn serial5_peek() -> super::c_int;
}
extern "C" {
    pub fn serial5_clear();
}
extern "C" {
    pub fn serial6_begin(divisor: u32);
}
extern "C" {
    pub fn serial6_format(format: u32);
}
extern "C" {
    pub fn serial6_end();
}
extern "C" {
    pub fn serial6_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial6_set_rx(pin: u8);
}
extern "C" {
    pub fn serial6_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial6_set_rts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial6_set_cts(pin: u8) -> super::c_int;
}
extern "C" {
    pub fn serial6_putchar(c: u32);
}
extern "C" {
    pub fn serial6_write(buf: *const super::c_void, count: super::c_uint);
}
extern "C" {
    pub fn serial6_flush();
}
extern "C" {
    pub fn serial6_write_buffer_free() -> super::c_int;
}
extern "C" {
    pub fn serial6_available() -> super::c_int;
}
extern "C" {
    pub fn serial6_getchar() -> super::c_int;
}
extern "C" {
    pub fn serial6_peek() -> super::c_int;
}
extern "C" {
    pub fn serial6_clear();
}
